// Autogenerated from Pigeon (v16.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "snapshot.h"
#import "MapInterfaces.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static FlutterError *createConnectionError(NSString *channelName) {
  return [FlutterError errorWithCode:@"channel-error" message:[NSString stringWithFormat:@"%@/%@/%@", @"Unable to establish connection on channel: '", channelName, @"'."] details:@""];
}

static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface FLTMapSnapshotOptions ()
+ (FLTMapSnapshotOptions *)fromList:(NSArray *)list;
+ (nullable FLTMapSnapshotOptions *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTSnapshotOverlayOptions ()
+ (FLTSnapshotOverlayOptions *)fromList:(NSArray *)list;
+ (nullable FLTSnapshotOverlayOptions *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation FLTMapSnapshotOptions
+ (instancetype)makeWithSize:(FLTSize *)size
    pixelRatio:(double )pixelRatio {
  FLTMapSnapshotOptions* pigeonResult = [[FLTMapSnapshotOptions alloc] init];
  pigeonResult.size = size;
  pigeonResult.pixelRatio = pixelRatio;
  return pigeonResult;
}
+ (FLTMapSnapshotOptions *)fromList:(NSArray *)list {
  FLTMapSnapshotOptions *pigeonResult = [[FLTMapSnapshotOptions alloc] init];
  pigeonResult.size = [FLTSize nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  pigeonResult.pixelRatio = [GetNullableObjectAtIndex(list, 1) doubleValue];
  return pigeonResult;
}
+ (nullable FLTMapSnapshotOptions *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTMapSnapshotOptions fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.size ? [self.size toList] : [NSNull null]),
    @(self.pixelRatio),
  ];
}
@end

@implementation FLTSnapshotOverlayOptions
+ (instancetype)makeWithShowLogo:(BOOL )showLogo
    showAttributes:(BOOL )showAttributes {
  FLTSnapshotOverlayOptions* pigeonResult = [[FLTSnapshotOverlayOptions alloc] init];
  pigeonResult.showLogo = showLogo;
  pigeonResult.showAttributes = showAttributes;
  return pigeonResult;
}
+ (FLTSnapshotOverlayOptions *)fromList:(NSArray *)list {
  FLTSnapshotOverlayOptions *pigeonResult = [[FLTSnapshotOverlayOptions alloc] init];
  pigeonResult.showLogo = [GetNullableObjectAtIndex(list, 0) boolValue];
  pigeonResult.showAttributes = [GetNullableObjectAtIndex(list, 1) boolValue];
  return pigeonResult;
}
+ (nullable FLTSnapshotOverlayOptions *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTSnapshotOverlayOptions fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.showLogo),
    @(self.showAttributes),
  ];
}
@end

@interface FLT_SnapshotterMessagerCodecReader : FlutterStandardReader
@end
@implementation FLT_SnapshotterMessagerCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [FLTCameraOptions fromList:[self readValue]];
    case 129:
      return [FLTCameraState fromList:[self readValue]];
    case 130:
      return [FLTCoordinateBounds fromList:[self readValue]];
    case 131:
      return [FLTMbxEdgeInsets fromList:[self readValue]];
    case 132:
      return [FLTMbxImage fromList:[self readValue]];
    case 133:
      return [FLTScreenCoordinate fromList:[self readValue]];
    case 134:
      return [FLTSize fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLT_SnapshotterMessagerCodecWriter : FlutterStandardWriter
@end
@implementation FLT_SnapshotterMessagerCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLTCameraOptions class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTCameraState class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTCoordinateBounds class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTMbxEdgeInsets class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTMbxImage class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTScreenCoordinate class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTSize class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLT_SnapshotterMessagerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_SnapshotterMessagerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_SnapshotterMessagerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_SnapshotterMessagerCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_SnapshotterMessagerGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLT_SnapshotterMessagerCodecReaderWriter *readerWriter = [[FLT_SnapshotterMessagerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpFLT_SnapshotterMessager(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SnapshotterMessager> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.cancel"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(cancelId:error:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(cancelId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api cancelId:arg_id error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.destroy"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(destroyId:error:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(destroyId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api destroyId:arg_id error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setCamera"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCameraId:cameraOptions:error:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(setCameraId:cameraOptions:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FLTCameraOptions *arg_cameraOptions = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setCameraId:arg_id cameraOptions:arg_cameraOptions error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setStyleUri"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setStyleUriId:styleUri:error:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(setStyleUriId:styleUri:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        NSString *arg_styleUri = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setStyleUriId:arg_id styleUri:arg_styleUri error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setStyleJson"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setStyleJsonId:styleJson:error:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(setStyleJsonId:styleJson:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        NSString *arg_styleJson = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setStyleJsonId:arg_id styleJson:arg_styleJson error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setSize"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSizeId:size:error:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(setSizeId:size:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FLTSize *arg_size = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setSizeId:arg_id size:arg_size error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.cameraForCoordinates"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(cameraForCoordinatesId:coordinates:padding:bearing:pitch:error:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(cameraForCoordinatesId:coordinates:padding:bearing:pitch:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        NSArray<NSDictionary<NSString *, id> *> *arg_coordinates = GetNullableObjectAtIndex(args, 1);
        FLTMbxEdgeInsets *arg_padding = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_bearing = GetNullableObjectAtIndex(args, 3);
        NSNumber *arg_pitch = GetNullableObjectAtIndex(args, 4);
        FlutterError *error;
        FLTCameraOptions *output = [api cameraForCoordinatesId:arg_id coordinates:arg_coordinates padding:arg_padding bearing:arg_bearing pitch:arg_pitch error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.coordinateBoundsForCamera"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(coordinateBoundsForCameraId:camera:error:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(coordinateBoundsForCameraId:camera:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FLTCameraOptions *arg_camera = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        FLTCoordinateBounds *output = [api coordinateBoundsForCameraId:arg_id camera:arg_camera error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getCameraState"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getCameraStateId:error:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(getCameraStateId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        FLTCameraState *output = [api getCameraStateId:arg_id error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getSize"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSizeId:error:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(getSizeId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        FLTSize *output = [api getSizeId:arg_id error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getStyleJson"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getStyleJsonId:error:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(getStyleJsonId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSString *output = [api getStyleJsonId:arg_id error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getStyleUri"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getStyleUriId:error:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(getStyleUriId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSString *output = [api getStyleUriId:arg_id error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.start"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startId:completion:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(startId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api startId:arg_id completion:^(FLTMbxImage *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *FLTOnSnapshotStyleListenerGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface FLTOnSnapshotStyleListener ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FLTOnSnapshotStyleListener

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onDidFinishLoadingStyleWithCompletion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onDidFinishLoadingStyle";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:FLTOnSnapshotStyleListenerGetCodec()];
  [channel sendMessage:nil reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    }
  }];
}
- (void)onDidFullyLoadStyleWithCompletion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onDidFullyLoadStyle";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:FLTOnSnapshotStyleListenerGetCodec()];
  [channel sendMessage:nil reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    }
  }];
}
- (void)onDidFailLoadingStyleMessage:(NSString *)arg_message completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onDidFailLoadingStyle";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:FLTOnSnapshotStyleListenerGetCodec()];
  [channel sendMessage:@[arg_message ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    }
  }];
}
- (void)onStyleImageMissingImageId:(NSString *)arg_imageId completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onStyleImageMissing";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:FLTOnSnapshotStyleListenerGetCodec()];
  [channel sendMessage:@[arg_imageId ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    }
  }];
}
@end

@interface FLT_SnapShotManagerCodecReader : FlutterStandardReader
@end
@implementation FLT_SnapShotManagerCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [FLTMapSnapshotOptions fromList:[self readValue]];
    case 129:
      return [FLTMbxImage fromList:[self readValue]];
    case 130:
      return [FLTSize fromList:[self readValue]];
    case 131:
      return [FLTSnapshotOverlayOptions fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLT_SnapShotManagerCodecWriter : FlutterStandardWriter
@end
@implementation FLT_SnapShotManagerCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLTMapSnapshotOptions class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTMbxImage class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTSize class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTSnapshotOverlayOptions class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLT_SnapShotManagerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_SnapShotManagerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_SnapShotManagerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_SnapShotManagerCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_SnapShotManagerGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLT_SnapShotManagerCodecReaderWriter *readerWriter = [[FLT_SnapShotManagerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpFLT_SnapShotManager(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SnapShotManager> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapShotManager.create"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapShotManagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createOptions:overlayOptions:error:)], @"FLT_SnapShotManager api (%@) doesn't respond to @selector(createOptions:overlayOptions:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTMapSnapshotOptions *arg_options = GetNullableObjectAtIndex(args, 0);
        FLTSnapshotOverlayOptions *arg_overlayOptions = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        NSString *output = [api createOptions:arg_options overlayOptions:arg_overlayOptions error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapShotManager.snapshot"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapShotManagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(snapshotWithCompletion:)], @"FLT_SnapShotManager api (%@) doesn't respond to @selector(snapshotWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api snapshotWithCompletion:^(FLTMbxImage *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
