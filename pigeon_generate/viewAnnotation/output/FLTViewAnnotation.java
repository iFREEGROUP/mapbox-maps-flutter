// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.mapbox.maps.pigeons;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class FLTViewAnnotation {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  public enum AnnotatedFeatureType {
    GEOMETRY(0),
    ANNOTATED_LAYER_FEATURE(1);

    final int index;

    private AnnotatedFeatureType(final int index) {
      this.index = index;
    }
  }

  public enum ViewAnnotationAnchor {
    CENTER(0),
    TOP(1),
    LEFT(2),
    BOTTOM(3),
    RIGHT(4),
    TOP_LEFT(5),
    BOTTOM_RIGHT(6),
    TOP_RIGHT(7),
    BOTTOM_LEFT(8);

    final int index;

    private ViewAnnotationAnchor(final int index) {
      this.index = index;
    }
  }

  public enum ViewAnnotationUpdateMode {
    MAP_FIXED_DELAY(0),
    MAP_SYNCHRONIZED(1);

    final int index;

    private ViewAnnotationUpdateMode(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AnnotatedFeature {
    private @NonNull Object value;

    public @NonNull Object getValue() {
      return value;
    }

    public void setValue(@NonNull Object setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    private @NonNull AnnotatedFeatureType type;

    public @NonNull AnnotatedFeatureType getType() {
      return type;
    }

    public void setType(@NonNull AnnotatedFeatureType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    AnnotatedFeature() {}

    public static final class Builder {

      private @Nullable Object value;

      @CanIgnoreReturnValue
      public @NonNull Builder setValue(@NonNull Object setterArg) {
        this.value = setterArg;
        return this;
      }

      private @Nullable AnnotatedFeatureType type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@NonNull AnnotatedFeatureType setterArg) {
        this.type = setterArg;
        return this;
      }

      public @NonNull AnnotatedFeature build() {
        AnnotatedFeature pigeonReturn = new AnnotatedFeature();
        pigeonReturn.setValue(value);
        pigeonReturn.setType(type);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(value);
      toListResult.add(type == null ? null : type.index);
      return toListResult;
    }

    static @NonNull AnnotatedFeature fromList(@NonNull ArrayList<Object> list) {
      AnnotatedFeature pigeonResult = new AnnotatedFeature();
      Object value = list.get(0);
      pigeonResult.setValue(value);
      Object type = list.get(1);
      pigeonResult.setType(AnnotatedFeatureType.values()[(int) type]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ViewAnnotationAnchorConfig {
    private @NonNull ViewAnnotationAnchor anchor;

    public @NonNull ViewAnnotationAnchor getAnchor() {
      return anchor;
    }

    public void setAnchor(@NonNull ViewAnnotationAnchor setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"anchor\" is null.");
      }
      this.anchor = setterArg;
    }

    private @NonNull Double offsetX;

    public @NonNull Double getOffsetX() {
      return offsetX;
    }

    public void setOffsetX(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"offsetX\" is null.");
      }
      this.offsetX = setterArg;
    }

    private @NonNull Double offsetY;

    public @NonNull Double getOffsetY() {
      return offsetY;
    }

    public void setOffsetY(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"offsetY\" is null.");
      }
      this.offsetY = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ViewAnnotationAnchorConfig() {}

    public static final class Builder {

      private @Nullable ViewAnnotationAnchor anchor;

      @CanIgnoreReturnValue
      public @NonNull Builder setAnchor(@NonNull ViewAnnotationAnchor setterArg) {
        this.anchor = setterArg;
        return this;
      }

      private @Nullable Double offsetX;

      @CanIgnoreReturnValue
      public @NonNull Builder setOffsetX(@NonNull Double setterArg) {
        this.offsetX = setterArg;
        return this;
      }

      private @Nullable Double offsetY;

      @CanIgnoreReturnValue
      public @NonNull Builder setOffsetY(@NonNull Double setterArg) {
        this.offsetY = setterArg;
        return this;
      }

      public @NonNull ViewAnnotationAnchorConfig build() {
        ViewAnnotationAnchorConfig pigeonReturn = new ViewAnnotationAnchorConfig();
        pigeonReturn.setAnchor(anchor);
        pigeonReturn.setOffsetX(offsetX);
        pigeonReturn.setOffsetY(offsetY);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(anchor == null ? null : anchor.index);
      toListResult.add(offsetX);
      toListResult.add(offsetY);
      return toListResult;
    }

    static @NonNull ViewAnnotationAnchorConfig fromList(@NonNull ArrayList<Object> list) {
      ViewAnnotationAnchorConfig pigeonResult = new ViewAnnotationAnchorConfig();
      Object anchor = list.get(0);
      pigeonResult.setAnchor(ViewAnnotationAnchor.values()[(int) anchor]);
      Object offsetX = list.get(1);
      pigeonResult.setOffsetX((Double) offsetX);
      Object offsetY = list.get(2);
      pigeonResult.setOffsetY((Double) offsetY);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ViewAnnotationOptions {
    private @Nullable AnnotatedFeature annotatedFeature;

    public @Nullable AnnotatedFeature getAnnotatedFeature() {
      return annotatedFeature;
    }

    public void setAnnotatedFeature(@Nullable AnnotatedFeature setterArg) {
      this.annotatedFeature = setterArg;
    }

    private @Nullable Double width;

    public @Nullable Double getWidth() {
      return width;
    }

    public void setWidth(@Nullable Double setterArg) {
      this.width = setterArg;
    }

    private @Nullable Double height;

    public @Nullable Double getHeight() {
      return height;
    }

    public void setHeight(@Nullable Double setterArg) {
      this.height = setterArg;
    }

    private @Nullable Boolean allowOverlap;

    public @Nullable Boolean getAllowOverlap() {
      return allowOverlap;
    }

    public void setAllowOverlap(@Nullable Boolean setterArg) {
      this.allowOverlap = setterArg;
    }

    private @Nullable Boolean allowOverlapWithPuck;

    public @Nullable Boolean getAllowOverlapWithPuck() {
      return allowOverlapWithPuck;
    }

    public void setAllowOverlapWithPuck(@Nullable Boolean setterArg) {
      this.allowOverlapWithPuck = setterArg;
    }

    private @Nullable Boolean visible;

    public @Nullable Boolean getVisible() {
      return visible;
    }

    public void setVisible(@Nullable Boolean setterArg) {
      this.visible = setterArg;
    }

    private @Nullable List<ViewAnnotationAnchorConfig> variableAnchors;

    public @Nullable List<ViewAnnotationAnchorConfig> getVariableAnchors() {
      return variableAnchors;
    }

    public void setVariableAnchors(@Nullable List<ViewAnnotationAnchorConfig> setterArg) {
      this.variableAnchors = setterArg;
    }

    private @Nullable Boolean selected;

    public @Nullable Boolean getSelected() {
      return selected;
    }

    public void setSelected(@Nullable Boolean setterArg) {
      this.selected = setterArg;
    }

    private @Nullable Boolean ignoreCameraPadding;

    public @Nullable Boolean getIgnoreCameraPadding() {
      return ignoreCameraPadding;
    }

    public void setIgnoreCameraPadding(@Nullable Boolean setterArg) {
      this.ignoreCameraPadding = setterArg;
    }

    public static final class Builder {

      private @Nullable AnnotatedFeature annotatedFeature;

      @CanIgnoreReturnValue
      public @NonNull Builder setAnnotatedFeature(@Nullable AnnotatedFeature setterArg) {
        this.annotatedFeature = setterArg;
        return this;
      }

      private @Nullable Double width;

      @CanIgnoreReturnValue
      public @NonNull Builder setWidth(@Nullable Double setterArg) {
        this.width = setterArg;
        return this;
      }

      private @Nullable Double height;

      @CanIgnoreReturnValue
      public @NonNull Builder setHeight(@Nullable Double setterArg) {
        this.height = setterArg;
        return this;
      }

      private @Nullable Boolean allowOverlap;

      @CanIgnoreReturnValue
      public @NonNull Builder setAllowOverlap(@Nullable Boolean setterArg) {
        this.allowOverlap = setterArg;
        return this;
      }

      private @Nullable Boolean allowOverlapWithPuck;

      @CanIgnoreReturnValue
      public @NonNull Builder setAllowOverlapWithPuck(@Nullable Boolean setterArg) {
        this.allowOverlapWithPuck = setterArg;
        return this;
      }

      private @Nullable Boolean visible;

      @CanIgnoreReturnValue
      public @NonNull Builder setVisible(@Nullable Boolean setterArg) {
        this.visible = setterArg;
        return this;
      }

      private @Nullable List<ViewAnnotationAnchorConfig> variableAnchors;

      @CanIgnoreReturnValue
      public @NonNull Builder setVariableAnchors(@Nullable List<ViewAnnotationAnchorConfig> setterArg) {
        this.variableAnchors = setterArg;
        return this;
      }

      private @Nullable Boolean selected;

      @CanIgnoreReturnValue
      public @NonNull Builder setSelected(@Nullable Boolean setterArg) {
        this.selected = setterArg;
        return this;
      }

      private @Nullable Boolean ignoreCameraPadding;

      @CanIgnoreReturnValue
      public @NonNull Builder setIgnoreCameraPadding(@Nullable Boolean setterArg) {
        this.ignoreCameraPadding = setterArg;
        return this;
      }

      public @NonNull ViewAnnotationOptions build() {
        ViewAnnotationOptions pigeonReturn = new ViewAnnotationOptions();
        pigeonReturn.setAnnotatedFeature(annotatedFeature);
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        pigeonReturn.setAllowOverlap(allowOverlap);
        pigeonReturn.setAllowOverlapWithPuck(allowOverlapWithPuck);
        pigeonReturn.setVisible(visible);
        pigeonReturn.setVariableAnchors(variableAnchors);
        pigeonReturn.setSelected(selected);
        pigeonReturn.setIgnoreCameraPadding(ignoreCameraPadding);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(9);
      toListResult.add((annotatedFeature == null) ? null : annotatedFeature.toList());
      toListResult.add(width);
      toListResult.add(height);
      toListResult.add(allowOverlap);
      toListResult.add(allowOverlapWithPuck);
      toListResult.add(visible);
      toListResult.add(variableAnchors);
      toListResult.add(selected);
      toListResult.add(ignoreCameraPadding);
      return toListResult;
    }

    static @NonNull ViewAnnotationOptions fromList(@NonNull ArrayList<Object> list) {
      ViewAnnotationOptions pigeonResult = new ViewAnnotationOptions();
      Object annotatedFeature = list.get(0);
      pigeonResult.setAnnotatedFeature((annotatedFeature == null) ? null : AnnotatedFeature.fromList((ArrayList<Object>) annotatedFeature));
      Object width = list.get(1);
      pigeonResult.setWidth((Double) width);
      Object height = list.get(2);
      pigeonResult.setHeight((Double) height);
      Object allowOverlap = list.get(3);
      pigeonResult.setAllowOverlap((Boolean) allowOverlap);
      Object allowOverlapWithPuck = list.get(4);
      pigeonResult.setAllowOverlapWithPuck((Boolean) allowOverlapWithPuck);
      Object visible = list.get(5);
      pigeonResult.setVisible((Boolean) visible);
      Object variableAnchors = list.get(6);
      pigeonResult.setVariableAnchors((List<ViewAnnotationAnchorConfig>) variableAnchors);
      Object selected = list.get(7);
      pigeonResult.setSelected((Boolean) selected);
      Object ignoreCameraPadding = list.get(8);
      pigeonResult.setIgnoreCameraPadding((Boolean) ignoreCameraPadding);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AnnotatedLayerFeature {
    private @NonNull String layerId;

    public @NonNull String getLayerId() {
      return layerId;
    }

    public void setLayerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"layerId\" is null.");
      }
      this.layerId = setterArg;
    }

    private @Nullable String featureId;

    public @Nullable String getFeatureId() {
      return featureId;
    }

    public void setFeatureId(@Nullable String setterArg) {
      this.featureId = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    AnnotatedLayerFeature() {}

    public static final class Builder {

      private @Nullable String layerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setLayerId(@NonNull String setterArg) {
        this.layerId = setterArg;
        return this;
      }

      private @Nullable String featureId;

      @CanIgnoreReturnValue
      public @NonNull Builder setFeatureId(@Nullable String setterArg) {
        this.featureId = setterArg;
        return this;
      }

      public @NonNull AnnotatedLayerFeature build() {
        AnnotatedLayerFeature pigeonReturn = new AnnotatedLayerFeature();
        pigeonReturn.setLayerId(layerId);
        pigeonReturn.setFeatureId(featureId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(layerId);
      toListResult.add(featureId);
      return toListResult;
    }

    static @NonNull AnnotatedLayerFeature fromList(@NonNull ArrayList<Object> list) {
      AnnotatedLayerFeature pigeonResult = new AnnotatedLayerFeature();
      Object layerId = list.get(0);
      pigeonResult.setLayerId((String) layerId);
      Object featureId = list.get(1);
      pigeonResult.setFeatureId((String) featureId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ScreenCoordinate {
    private @NonNull Double x;

    public @NonNull Double getX() {
      return x;
    }

    public void setX(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"x\" is null.");
      }
      this.x = setterArg;
    }

    private @NonNull Double y;

    public @NonNull Double getY() {
      return y;
    }

    public void setY(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"y\" is null.");
      }
      this.y = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ScreenCoordinate() {}

    public static final class Builder {

      private @Nullable Double x;

      @CanIgnoreReturnValue
      public @NonNull Builder setX(@NonNull Double setterArg) {
        this.x = setterArg;
        return this;
      }

      private @Nullable Double y;

      @CanIgnoreReturnValue
      public @NonNull Builder setY(@NonNull Double setterArg) {
        this.y = setterArg;
        return this;
      }

      public @NonNull ScreenCoordinate build() {
        ScreenCoordinate pigeonReturn = new ScreenCoordinate();
        pigeonReturn.setX(x);
        pigeonReturn.setY(y);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(x);
      toListResult.add(y);
      return toListResult;
    }

    static @NonNull ScreenCoordinate fromList(@NonNull ArrayList<Object> list) {
      ScreenCoordinate pigeonResult = new ScreenCoordinate();
      Object x = list.get(0);
      pigeonResult.setX((Double) x);
      Object y = list.get(1);
      pigeonResult.setY((Double) y);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class ViewAnnotationManagerCodec extends StandardMessageCodec {
    public static final ViewAnnotationManagerCodec INSTANCE = new ViewAnnotationManagerCodec();

    private ViewAnnotationManagerCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AnnotatedFeature.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return AnnotatedLayerFeature.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return ViewAnnotationAnchorConfig.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return ViewAnnotationOptions.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return ViewAnnotationOptions.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AnnotatedFeature) {
        stream.write(128);
        writeValue(stream, ((AnnotatedFeature) value).toList());
      } else if (value instanceof AnnotatedLayerFeature) {
        stream.write(129);
        writeValue(stream, ((AnnotatedLayerFeature) value).toList());
      } else if (value instanceof ViewAnnotationAnchorConfig) {
        stream.write(130);
        writeValue(stream, ((ViewAnnotationAnchorConfig) value).toList());
      } else if (value instanceof ViewAnnotationOptions) {
        stream.write(131);
        writeValue(stream, ((ViewAnnotationOptions) value).toList());
      } else if (value instanceof ViewAnnotationOptions) {
        stream.write(132);
        writeValue(stream, ((ViewAnnotationOptions) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface ViewAnnotationManager {

    void addViewAnnotation(@NonNull byte[] data, @NonNull ViewAnnotationOptions options, @NonNull Result<Long> result);

    void removeAllViewAnnotations(@NonNull VoidResult result);

    void removeViewAnnotation(@NonNull Long viewId, @NonNull VoidResult result);

    void updateViewAnnotation(@NonNull Long viewId, @NonNull ViewAnnotationOptions options, @Nullable byte[] data, @NonNull Result<Boolean> result);

    void getViewAnnotationOptions(@NonNull AnnotatedLayerFeature annotatedLayerFeature, @NonNull NullableResult<ViewAnnotationOptions> result);

    void getViewAnnotationOptionsByViewId(@NonNull Long viewId, @NonNull NullableResult<ViewAnnotationOptions> result);

    void setViewAnnotationUpdateMode(@NonNull ViewAnnotationUpdateMode mode, @NonNull VoidResult result);

    void getViewAnnotationUpdateMode(@NonNull Result<ViewAnnotationUpdateMode> result);

    /** The codec used by ViewAnnotationManager. */
    static @NonNull MessageCodec<Object> getCodec() {
      return ViewAnnotationManagerCodec.INSTANCE;
    }
    /**Sets up an instance of `ViewAnnotationManager` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable ViewAnnotationManager api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter.ViewAnnotationManager.addViewAnnotation", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                byte[] dataArg = (byte[]) args.get(0);
                ViewAnnotationOptions optionsArg = (ViewAnnotationOptions) args.get(1);
                Result<Long> resultCallback =
                    new Result<Long>() {
                      public void success(Long result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.addViewAnnotation(dataArg, optionsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter.ViewAnnotationManager.removeAllViewAnnotations", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.removeAllViewAnnotations(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter.ViewAnnotationManager.removeViewAnnotation", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number viewIdArg = (Number) args.get(0);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.removeViewAnnotation((viewIdArg == null) ? null : viewIdArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter.ViewAnnotationManager.updateViewAnnotation", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number viewIdArg = (Number) args.get(0);
                ViewAnnotationOptions optionsArg = (ViewAnnotationOptions) args.get(1);
                byte[] dataArg = (byte[]) args.get(2);
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.updateViewAnnotation((viewIdArg == null) ? null : viewIdArg.longValue(), optionsArg, dataArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter.ViewAnnotationManager.getViewAnnotationOptions", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AnnotatedLayerFeature annotatedLayerFeatureArg = (AnnotatedLayerFeature) args.get(0);
                NullableResult<ViewAnnotationOptions> resultCallback =
                    new NullableResult<ViewAnnotationOptions>() {
                      public void success(ViewAnnotationOptions result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getViewAnnotationOptions(annotatedLayerFeatureArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter.ViewAnnotationManager.getViewAnnotationOptionsByViewId", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number viewIdArg = (Number) args.get(0);
                NullableResult<ViewAnnotationOptions> resultCallback =
                    new NullableResult<ViewAnnotationOptions>() {
                      public void success(ViewAnnotationOptions result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getViewAnnotationOptionsByViewId((viewIdArg == null) ? null : viewIdArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter.ViewAnnotationManager.setViewAnnotationUpdateMode", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewAnnotationUpdateMode modeArg = ViewAnnotationUpdateMode.values()[(int) args.get(0)];
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setViewAnnotationUpdateMode(modeArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter.ViewAnnotationManager.getViewAnnotationUpdateMode", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<ViewAnnotationUpdateMode> resultCallback =
                    new Result<ViewAnnotationUpdateMode>() {
                      public void success(ViewAnnotationUpdateMode result) {
                        wrapped.add(0, result.index);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getViewAnnotationUpdateMode(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class OnViewAnnotationUpdatedListenerCodec extends StandardMessageCodec {
    public static final OnViewAnnotationUpdatedListenerCodec INSTANCE = new OnViewAnnotationUpdatedListenerCodec();

    private OnViewAnnotationUpdatedListenerCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AnnotatedFeature.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return AnnotatedLayerFeature.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return ScreenCoordinate.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return ViewAnnotationAnchorConfig.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return ViewAnnotationOptions.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AnnotatedFeature) {
        stream.write(128);
        writeValue(stream, ((AnnotatedFeature) value).toList());
      } else if (value instanceof AnnotatedLayerFeature) {
        stream.write(129);
        writeValue(stream, ((AnnotatedLayerFeature) value).toList());
      } else if (value instanceof ScreenCoordinate) {
        stream.write(130);
        writeValue(stream, ((ScreenCoordinate) value).toList());
      } else if (value instanceof ViewAnnotationAnchorConfig) {
        stream.write(131);
        writeValue(stream, ((ViewAnnotationAnchorConfig) value).toList());
      } else if (value instanceof ViewAnnotationOptions) {
        stream.write(132);
        writeValue(stream, ((ViewAnnotationOptions) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class OnViewAnnotationUpdatedListener {
    private final @NonNull BinaryMessenger binaryMessenger;

    public OnViewAnnotationUpdatedListener(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    /** The codec used by OnViewAnnotationUpdatedListener. */
    static @NonNull MessageCodec<Object> getCodec() {
      return OnViewAnnotationUpdatedListenerCodec.INSTANCE;
    }
    public void onViewAnnotationPositionUpdated(@NonNull Long viewIdArg, @NonNull ScreenCoordinate leftTopCoordinateArg, @NonNull Double widthArg, @NonNull Double heightArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnViewAnnotationUpdatedListener.onViewAnnotationPositionUpdated";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(viewIdArg, leftTopCoordinateArg, widthArg, heightArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onViewAnnotationAnchorCoordinateUpdated(@NonNull Long viewIdArg, @Nullable Map<String, Object> anchorCoordinateArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnViewAnnotationUpdatedListener.onViewAnnotationAnchorCoordinateUpdated";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(viewIdArg, anchorCoordinateArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onViewAnnotationAnchorUpdated(@NonNull Long viewIdArg, @NonNull ViewAnnotationAnchorConfig anchorArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnViewAnnotationUpdatedListener.onViewAnnotationAnchorUpdated";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(viewIdArg, anchorArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onViewAnnotationVisibilityUpdated(@NonNull Long viewIdArg, @NonNull Boolean visibleArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnViewAnnotationUpdatedListener.onViewAnnotationVisibilityUpdated";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(viewIdArg, visibleArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class OnViewAnnotationTapListener {
    private final @NonNull BinaryMessenger binaryMessenger;

    public OnViewAnnotationTapListener(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    /** The codec used by OnViewAnnotationTapListener. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    public void onViewAnnotationClick(@NonNull Long viewIdArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnViewAnnotationTapListener.onViewAnnotationClick";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(viewIdArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
}
