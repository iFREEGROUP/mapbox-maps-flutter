// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

class Size {
  Size({
    required this.width,
    required this.height,
  });

  /// Width of the size.
  double width;

  /// Height of the size.
  double height;

  Object encode() {
    return <Object?>[
      width,
      height,
    ];
  }

  static Size decode(Object result) {
    result as List<Object?>;
    return Size(
      width: result[0]! as double,
      height: result[1]! as double,
    );
  }
}

class MapSnapshotOptions {
  MapSnapshotOptions({
    required this.size,
    required this.pixelRatio,
  });

  Size size;

  double pixelRatio;

  Object encode() {
    return <Object?>[
      size.encode(),
      pixelRatio,
    ];
  }

  static MapSnapshotOptions decode(Object result) {
    result as List<Object?>;
    return MapSnapshotOptions(
      size: Size.decode(result[0]! as List<Object?>),
      pixelRatio: result[1]! as double,
    );
  }
}

class SnapshotOverlayOptions {
  SnapshotOverlayOptions({
    this.showLogo = true,
    this.showAttributes = true,
  });

  bool showLogo;

  bool showAttributes;

  Object encode() {
    return <Object?>[
      showLogo,
      showAttributes,
    ];
  }

  static SnapshotOverlayOptions decode(Object result) {
    result as List<Object?>;
    return SnapshotOverlayOptions(
      showLogo: result[0]! as bool,
      showAttributes: result[1]! as bool,
    );
  }
}

class MbxImage {
  MbxImage({
    required this.width,
    required this.height,
    required this.data,
  });

  /// The width of the image, in screen pixels.
  int width;

  /// The height of the image, in screen pixels.
  int height;

  /// 32-bit premultiplied RGBA image data.
  ///
  /// An uncompressed image data encoded in 32-bit RGBA format with premultiplied
  /// alpha channel. This field should contain exactly `4 * width * height` bytes. It
  /// should consist of a sequence of scanlines.
  Uint8List data;

  Object encode() {
    return <Object?>[
      width,
      height,
      data,
    ];
  }

  static MbxImage decode(Object result) {
    result as List<Object?>;
    return MbxImage(
      width: result[0]! as int,
      height: result[1]! as int,
      data: result[2]! as Uint8List,
    );
  }
}

class __SnapShotManagerCodec extends StandardMessageCodec {
  const __SnapShotManagerCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MapSnapshotOptions) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is MbxImage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is Size) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is SnapshotOverlayOptions) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return MapSnapshotOptions.decode(readValue(buffer)!);
      case 129: 
        return MbxImage.decode(readValue(buffer)!);
      case 130: 
        return Size.decode(readValue(buffer)!);
      case 131: 
        return SnapshotOverlayOptions.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class _SnapShotManager {
  /// Constructor for [_SnapShotManager].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  _SnapShotManager({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = __SnapShotManagerCodec();

  Future<String> create(MapSnapshotOptions options, SnapshotOverlayOptions overlayOptions) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.mapbox_maps_flutter._SnapShotManager.create';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[options, overlayOptions]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  Future<MbxImage?> snapshot() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.mapbox_maps_flutter._SnapShotManager.snapshot';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as MbxImage?);
    }
  }
}
