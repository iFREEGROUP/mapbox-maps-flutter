// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "snapshot_manager.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface FLTSize ()
+ (FLTSize *)fromList:(NSArray *)list;
+ (nullable FLTSize *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTMapSnapshotOptions ()
+ (FLTMapSnapshotOptions *)fromList:(NSArray *)list;
+ (nullable FLTMapSnapshotOptions *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTSnapshotOverlayOptions ()
+ (FLTSnapshotOverlayOptions *)fromList:(NSArray *)list;
+ (nullable FLTSnapshotOverlayOptions *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTMbxImage ()
+ (FLTMbxImage *)fromList:(NSArray *)list;
+ (nullable FLTMbxImage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation FLTSize
+ (instancetype)makeWithWidth:(double )width
    height:(double )height {
  FLTSize* pigeonResult = [[FLTSize alloc] init];
  pigeonResult.width = width;
  pigeonResult.height = height;
  return pigeonResult;
}
+ (FLTSize *)fromList:(NSArray *)list {
  FLTSize *pigeonResult = [[FLTSize alloc] init];
  pigeonResult.width = [GetNullableObjectAtIndex(list, 0) doubleValue];
  pigeonResult.height = [GetNullableObjectAtIndex(list, 1) doubleValue];
  return pigeonResult;
}
+ (nullable FLTSize *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTSize fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.width),
    @(self.height),
  ];
}
@end

@implementation FLTMapSnapshotOptions
+ (instancetype)makeWithSize:(FLTSize *)size
    pixelRatio:(double )pixelRatio {
  FLTMapSnapshotOptions* pigeonResult = [[FLTMapSnapshotOptions alloc] init];
  pigeonResult.size = size;
  pigeonResult.pixelRatio = pixelRatio;
  return pigeonResult;
}
+ (FLTMapSnapshotOptions *)fromList:(NSArray *)list {
  FLTMapSnapshotOptions *pigeonResult = [[FLTMapSnapshotOptions alloc] init];
  pigeonResult.size = [FLTSize nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  pigeonResult.pixelRatio = [GetNullableObjectAtIndex(list, 1) doubleValue];
  return pigeonResult;
}
+ (nullable FLTMapSnapshotOptions *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTMapSnapshotOptions fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.size ? [self.size toList] : [NSNull null]),
    @(self.pixelRatio),
  ];
}
@end

@implementation FLTSnapshotOverlayOptions
+ (instancetype)makeWithShowLogo:(BOOL )showLogo
    showAttributes:(BOOL )showAttributes {
  FLTSnapshotOverlayOptions* pigeonResult = [[FLTSnapshotOverlayOptions alloc] init];
  pigeonResult.showLogo = showLogo;
  pigeonResult.showAttributes = showAttributes;
  return pigeonResult;
}
+ (FLTSnapshotOverlayOptions *)fromList:(NSArray *)list {
  FLTSnapshotOverlayOptions *pigeonResult = [[FLTSnapshotOverlayOptions alloc] init];
  pigeonResult.showLogo = [GetNullableObjectAtIndex(list, 0) boolValue];
  pigeonResult.showAttributes = [GetNullableObjectAtIndex(list, 1) boolValue];
  return pigeonResult;
}
+ (nullable FLTSnapshotOverlayOptions *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTSnapshotOverlayOptions fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.showLogo),
    @(self.showAttributes),
  ];
}
@end

@implementation FLTMbxImage
+ (instancetype)makeWithWidth:(NSInteger )width
    height:(NSInteger )height
    data:(FlutterStandardTypedData *)data {
  FLTMbxImage* pigeonResult = [[FLTMbxImage alloc] init];
  pigeonResult.width = width;
  pigeonResult.height = height;
  pigeonResult.data = data;
  return pigeonResult;
}
+ (FLTMbxImage *)fromList:(NSArray *)list {
  FLTMbxImage *pigeonResult = [[FLTMbxImage alloc] init];
  pigeonResult.width = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.height = [GetNullableObjectAtIndex(list, 1) integerValue];
  pigeonResult.data = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable FLTMbxImage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTMbxImage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.width),
    @(self.height),
    self.data ?: [NSNull null],
  ];
}
@end

@interface FLT_SnapShotManagerCodecReader : FlutterStandardReader
@end
@implementation FLT_SnapShotManagerCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLTMapSnapshotOptions fromList:[self readValue]];
    case 129: 
      return [FLTMbxImage fromList:[self readValue]];
    case 130: 
      return [FLTSize fromList:[self readValue]];
    case 131: 
      return [FLTSnapshotOverlayOptions fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLT_SnapShotManagerCodecWriter : FlutterStandardWriter
@end
@implementation FLT_SnapShotManagerCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLTMapSnapshotOptions class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTMbxImage class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTSize class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTSnapshotOverlayOptions class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLT_SnapShotManagerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_SnapShotManagerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_SnapShotManagerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_SnapShotManagerCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_SnapShotManagerGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLT_SnapShotManagerCodecReaderWriter *readerWriter = [[FLT_SnapShotManagerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpFLT_SnapShotManager(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SnapShotManager> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapShotManager.create"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapShotManagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createOptions:overlayOptions:error:)], @"FLT_SnapShotManager api (%@) doesn't respond to @selector(createOptions:overlayOptions:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTMapSnapshotOptions *arg_options = GetNullableObjectAtIndex(args, 0);
        FLTSnapshotOverlayOptions *arg_overlayOptions = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        NSString *output = [api createOptions:arg_options overlayOptions:arg_overlayOptions error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapShotManager.snapshot"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapShotManagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(snapshotWithCompletion:)], @"FLT_SnapShotManager api (%@) doesn't respond to @selector(snapshotWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api snapshotWithCompletion:^(FLTMbxImage *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
