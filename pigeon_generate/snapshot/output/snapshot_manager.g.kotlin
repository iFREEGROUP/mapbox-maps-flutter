// Autogenerated from Pigeon (v16.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class Size (
  /** Width of the size. */
  val width: Double,
  /** Height of the size. */
  val height: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Size {
      val width = list[0] as Double
      val height = list[1] as Double
      return Size(width, height)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      width,
      height,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MapSnapshotOptions (
  val size: Size,
  val pixelRatio: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MapSnapshotOptions {
      val size = Size.fromList(list[0] as List<Any?>)
      val pixelRatio = list[1] as Double
      return MapSnapshotOptions(size, pixelRatio)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      size.toList(),
      pixelRatio,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SnapshotOverlayOptions (
  val showLogo: Boolean,
  val showAttributes: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SnapshotOverlayOptions {
      val showLogo = list[0] as Boolean
      val showAttributes = list[1] as Boolean
      return SnapshotOverlayOptions(showLogo, showAttributes)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      showLogo,
      showAttributes,
    )
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface _SnapshotManager {

  companion object {
    /** The codec used by _SnapshotManager. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `_SnapshotManager` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: _SnapshotManager?) {
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object _SnapShotManagerCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MapSnapshotOptions.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Size.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SnapshotOverlayOptions.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MapSnapshotOptions -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is Size -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is SnapshotOverlayOptions -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface _SnapShotManager {
  fun create(options: MapSnapshotOptions, overlayOptions: SnapshotOverlayOptions): String
  fun remove(id: String)

  companion object {
    /** The codec used by _SnapShotManager. */
    val codec: MessageCodec<Any?> by lazy {
      _SnapShotManagerCodec
    }
    /** Sets up an instance of `_SnapShotManager` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: _SnapShotManager?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapShotManager.create", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val optionsArg = args[0] as MapSnapshotOptions
            val overlayOptionsArg = args[1] as SnapshotOverlayOptions
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.create(optionsArg, overlayOptionsArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapShotManager.remove", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.remove(idArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
