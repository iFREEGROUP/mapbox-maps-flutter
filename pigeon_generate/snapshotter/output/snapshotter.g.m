// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "snapshotter.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static FlutterError *createConnectionError(NSString *channelName) {
  return [FlutterError errorWithCode:@"channel-error" message:[NSString stringWithFormat:@"%@/%@/%@", @"Unable to establish connection on channel: '", channelName, @"'."] details:@""];
}

static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface FLTMbxEdgeInsets ()
+ (FLTMbxEdgeInsets *)fromList:(NSArray *)list;
+ (nullable FLTMbxEdgeInsets *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTScreenCoordinate ()
+ (FLTScreenCoordinate *)fromList:(NSArray *)list;
+ (nullable FLTScreenCoordinate *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTCameraOptions ()
+ (FLTCameraOptions *)fromList:(NSArray *)list;
+ (nullable FLTCameraOptions *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTSize ()
+ (FLTSize *)fromList:(NSArray *)list;
+ (nullable FLTSize *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTCoordinateBounds ()
+ (FLTCoordinateBounds *)fromList:(NSArray *)list;
+ (nullable FLTCoordinateBounds *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTCameraState ()
+ (FLTCameraState *)fromList:(NSArray *)list;
+ (nullable FLTCameraState *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTMbxImage ()
+ (FLTMbxImage *)fromList:(NSArray *)list;
+ (nullable FLTMbxImage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation FLTMbxEdgeInsets
+ (instancetype)makeWithTop:(double )top
    left:(double )left
    bottom:(double )bottom
    right:(double )right {
  FLTMbxEdgeInsets* pigeonResult = [[FLTMbxEdgeInsets alloc] init];
  pigeonResult.top = top;
  pigeonResult.left = left;
  pigeonResult.bottom = bottom;
  pigeonResult.right = right;
  return pigeonResult;
}
+ (FLTMbxEdgeInsets *)fromList:(NSArray *)list {
  FLTMbxEdgeInsets *pigeonResult = [[FLTMbxEdgeInsets alloc] init];
  pigeonResult.top = [GetNullableObjectAtIndex(list, 0) doubleValue];
  pigeonResult.left = [GetNullableObjectAtIndex(list, 1) doubleValue];
  pigeonResult.bottom = [GetNullableObjectAtIndex(list, 2) doubleValue];
  pigeonResult.right = [GetNullableObjectAtIndex(list, 3) doubleValue];
  return pigeonResult;
}
+ (nullable FLTMbxEdgeInsets *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTMbxEdgeInsets fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.top),
    @(self.left),
    @(self.bottom),
    @(self.right),
  ];
}
@end

@implementation FLTScreenCoordinate
+ (instancetype)makeWithX:(double )x
    y:(double )y {
  FLTScreenCoordinate* pigeonResult = [[FLTScreenCoordinate alloc] init];
  pigeonResult.x = x;
  pigeonResult.y = y;
  return pigeonResult;
}
+ (FLTScreenCoordinate *)fromList:(NSArray *)list {
  FLTScreenCoordinate *pigeonResult = [[FLTScreenCoordinate alloc] init];
  pigeonResult.x = [GetNullableObjectAtIndex(list, 0) doubleValue];
  pigeonResult.y = [GetNullableObjectAtIndex(list, 1) doubleValue];
  return pigeonResult;
}
+ (nullable FLTScreenCoordinate *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTScreenCoordinate fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.x),
    @(self.y),
  ];
}
@end

@implementation FLTCameraOptions
+ (instancetype)makeWithCenter:(nullable NSDictionary<NSString *, id> *)center
    padding:(nullable FLTMbxEdgeInsets *)padding
    anchor:(nullable FLTScreenCoordinate *)anchor
    zoom:(nullable NSNumber *)zoom
    bearing:(nullable NSNumber *)bearing
    pitch:(nullable NSNumber *)pitch {
  FLTCameraOptions* pigeonResult = [[FLTCameraOptions alloc] init];
  pigeonResult.center = center;
  pigeonResult.padding = padding;
  pigeonResult.anchor = anchor;
  pigeonResult.zoom = zoom;
  pigeonResult.bearing = bearing;
  pigeonResult.pitch = pitch;
  return pigeonResult;
}
+ (FLTCameraOptions *)fromList:(NSArray *)list {
  FLTCameraOptions *pigeonResult = [[FLTCameraOptions alloc] init];
  pigeonResult.center = GetNullableObjectAtIndex(list, 0);
  pigeonResult.padding = [FLTMbxEdgeInsets nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  pigeonResult.anchor = [FLTScreenCoordinate nullableFromList:(GetNullableObjectAtIndex(list, 2))];
  pigeonResult.zoom = GetNullableObjectAtIndex(list, 3);
  pigeonResult.bearing = GetNullableObjectAtIndex(list, 4);
  pigeonResult.pitch = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable FLTCameraOptions *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTCameraOptions fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.center ?: [NSNull null],
    (self.padding ? [self.padding toList] : [NSNull null]),
    (self.anchor ? [self.anchor toList] : [NSNull null]),
    self.zoom ?: [NSNull null],
    self.bearing ?: [NSNull null],
    self.pitch ?: [NSNull null],
  ];
}
@end

@implementation FLTSize
+ (instancetype)makeWithWidth:(double )width
    height:(double )height {
  FLTSize* pigeonResult = [[FLTSize alloc] init];
  pigeonResult.width = width;
  pigeonResult.height = height;
  return pigeonResult;
}
+ (FLTSize *)fromList:(NSArray *)list {
  FLTSize *pigeonResult = [[FLTSize alloc] init];
  pigeonResult.width = [GetNullableObjectAtIndex(list, 0) doubleValue];
  pigeonResult.height = [GetNullableObjectAtIndex(list, 1) doubleValue];
  return pigeonResult;
}
+ (nullable FLTSize *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTSize fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.width),
    @(self.height),
  ];
}
@end

@implementation FLTCoordinateBounds
+ (instancetype)makeWithSouthwest:(NSDictionary<NSString *, id> *)southwest
    northeast:(NSDictionary<NSString *, id> *)northeast
    infiniteBounds:(BOOL )infiniteBounds {
  FLTCoordinateBounds* pigeonResult = [[FLTCoordinateBounds alloc] init];
  pigeonResult.southwest = southwest;
  pigeonResult.northeast = northeast;
  pigeonResult.infiniteBounds = infiniteBounds;
  return pigeonResult;
}
+ (FLTCoordinateBounds *)fromList:(NSArray *)list {
  FLTCoordinateBounds *pigeonResult = [[FLTCoordinateBounds alloc] init];
  pigeonResult.southwest = GetNullableObjectAtIndex(list, 0);
  pigeonResult.northeast = GetNullableObjectAtIndex(list, 1);
  pigeonResult.infiniteBounds = [GetNullableObjectAtIndex(list, 2) boolValue];
  return pigeonResult;
}
+ (nullable FLTCoordinateBounds *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTCoordinateBounds fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.southwest ?: [NSNull null],
    self.northeast ?: [NSNull null],
    @(self.infiniteBounds),
  ];
}
@end

@implementation FLTCameraState
+ (instancetype)makeWithCenter:(NSDictionary<NSString *, id> *)center
    padding:(FLTMbxEdgeInsets *)padding
    zoom:(double )zoom
    bearing:(double )bearing
    pitch:(double )pitch {
  FLTCameraState* pigeonResult = [[FLTCameraState alloc] init];
  pigeonResult.center = center;
  pigeonResult.padding = padding;
  pigeonResult.zoom = zoom;
  pigeonResult.bearing = bearing;
  pigeonResult.pitch = pitch;
  return pigeonResult;
}
+ (FLTCameraState *)fromList:(NSArray *)list {
  FLTCameraState *pigeonResult = [[FLTCameraState alloc] init];
  pigeonResult.center = GetNullableObjectAtIndex(list, 0);
  pigeonResult.padding = [FLTMbxEdgeInsets nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  pigeonResult.zoom = [GetNullableObjectAtIndex(list, 2) doubleValue];
  pigeonResult.bearing = [GetNullableObjectAtIndex(list, 3) doubleValue];
  pigeonResult.pitch = [GetNullableObjectAtIndex(list, 4) doubleValue];
  return pigeonResult;
}
+ (nullable FLTCameraState *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTCameraState fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.center ?: [NSNull null],
    (self.padding ? [self.padding toList] : [NSNull null]),
    @(self.zoom),
    @(self.bearing),
    @(self.pitch),
  ];
}
@end

@implementation FLTMbxImage
+ (instancetype)makeWithWidth:(NSInteger )width
    height:(NSInteger )height
    data:(FlutterStandardTypedData *)data {
  FLTMbxImage* pigeonResult = [[FLTMbxImage alloc] init];
  pigeonResult.width = width;
  pigeonResult.height = height;
  pigeonResult.data = data;
  return pigeonResult;
}
+ (FLTMbxImage *)fromList:(NSArray *)list {
  FLTMbxImage *pigeonResult = [[FLTMbxImage alloc] init];
  pigeonResult.width = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.height = [GetNullableObjectAtIndex(list, 1) integerValue];
  pigeonResult.data = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable FLTMbxImage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTMbxImage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.width),
    @(self.height),
    self.data ?: [NSNull null],
  ];
}
@end

@interface FLT_SnapshotterMessagerCodecReader : FlutterStandardReader
@end
@implementation FLT_SnapshotterMessagerCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLTCameraOptions fromList:[self readValue]];
    case 129: 
      return [FLTCameraState fromList:[self readValue]];
    case 130: 
      return [FLTCoordinateBounds fromList:[self readValue]];
    case 131: 
      return [FLTMbxEdgeInsets fromList:[self readValue]];
    case 132: 
      return [FLTMbxImage fromList:[self readValue]];
    case 133: 
      return [FLTScreenCoordinate fromList:[self readValue]];
    case 134: 
      return [FLTSize fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLT_SnapshotterMessagerCodecWriter : FlutterStandardWriter
@end
@implementation FLT_SnapshotterMessagerCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLTCameraOptions class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTCameraState class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTCoordinateBounds class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTMbxEdgeInsets class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTMbxImage class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTScreenCoordinate class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTSize class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLT_SnapshotterMessagerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_SnapshotterMessagerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_SnapshotterMessagerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_SnapshotterMessagerCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_SnapshotterMessagerGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLT_SnapshotterMessagerCodecReaderWriter *readerWriter = [[FLT_SnapshotterMessagerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpFLT_SnapshotterMessager(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SnapshotterMessager> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.cancel"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(cancelId:completion:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(cancelId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api cancelId:arg_id completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.destroy"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(destroyId:completion:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(destroyId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api destroyId:arg_id completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setCamera"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCameraId:cameraOptions:completion:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(setCameraId:cameraOptions:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FLTCameraOptions *arg_cameraOptions = GetNullableObjectAtIndex(args, 1);
        [api setCameraId:arg_id cameraOptions:arg_cameraOptions completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setStyleUri"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setStyleUriId:styleUri:completion:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(setStyleUriId:styleUri:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        NSString *arg_styleUri = GetNullableObjectAtIndex(args, 1);
        [api setStyleUriId:arg_id styleUri:arg_styleUri completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setStyleJson"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setStyleJsonId:styleJson:completion:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(setStyleJsonId:styleJson:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        NSString *arg_styleJson = GetNullableObjectAtIndex(args, 1);
        [api setStyleJsonId:arg_id styleJson:arg_styleJson completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setSize"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSizeId:size:completion:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(setSizeId:size:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FLTSize *arg_size = GetNullableObjectAtIndex(args, 1);
        [api setSizeId:arg_id size:arg_size completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.cameraForCoordinates"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(cameraForCoordinatesId:coordinates:padding:bearing:pitch:completion:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(cameraForCoordinatesId:coordinates:padding:bearing:pitch:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        NSArray<NSDictionary<NSString *, id> *> *arg_coordinates = GetNullableObjectAtIndex(args, 1);
        FLTMbxEdgeInsets *arg_padding = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_bearing = GetNullableObjectAtIndex(args, 3);
        NSNumber *arg_pitch = GetNullableObjectAtIndex(args, 4);
        [api cameraForCoordinatesId:arg_id coordinates:arg_coordinates padding:arg_padding bearing:arg_bearing pitch:arg_pitch completion:^(FLTCameraOptions *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.coordinateBoundsForCamera"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(coordinateBoundsForCameraId:camera:completion:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(coordinateBoundsForCameraId:camera:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FLTCameraOptions *arg_camera = GetNullableObjectAtIndex(args, 1);
        [api coordinateBoundsForCameraId:arg_id camera:arg_camera completion:^(FLTCoordinateBounds *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getCameraState"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getCameraStateId:completion:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(getCameraStateId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api getCameraStateId:arg_id completion:^(FLTCameraState *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getSize"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSizeId:completion:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(getSizeId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api getSizeId:arg_id completion:^(FLTSize *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getStyleJson"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getStyleJsonId:completion:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(getStyleJsonId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api getStyleJsonId:arg_id completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getStyleUri"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getStyleUriId:completion:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(getStyleUriId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api getStyleUriId:arg_id completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.start"
        binaryMessenger:binaryMessenger
        codec:FLT_SnapshotterMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startId:completion:)], @"FLT_SnapshotterMessager api (%@) doesn't respond to @selector(startId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api startId:arg_id completion:^(FLTMbxImage *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *FLTOnSnapshotStyleListenerGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface FLTOnSnapshotStyleListener ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FLTOnSnapshotStyleListener

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onDidFinishLoadingStyleWithCompletion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onDidFinishLoadingStyle";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:FLTOnSnapshotStyleListenerGetCodec()];
  [channel sendMessage:nil reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onDidFullyLoadStyleWithCompletion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onDidFullyLoadStyle";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:FLTOnSnapshotStyleListenerGetCodec()];
  [channel sendMessage:nil reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onDidFailLoadingStyleMessage:(NSString *)arg_message completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onDidFailLoadingStyle";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:FLTOnSnapshotStyleListenerGetCodec()];
  [channel sendMessage:@[arg_message ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onStyleImageMissingImageId:(NSString *)arg_imageId completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onStyleImageMissing";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:FLTOnSnapshotStyleListenerGetCodec()];
  [channel sendMessage:@[arg_imageId ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
@end

