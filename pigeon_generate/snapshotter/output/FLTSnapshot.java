// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.mapbox.maps.pigeons;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class FLTSnapshot {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MbxEdgeInsets {
    /** Padding from the top. */
    private @NonNull Double top;

    public @NonNull Double getTop() {
      return top;
    }

    public void setTop(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"top\" is null.");
      }
      this.top = setterArg;
    }

    /** Padding from the left. */
    private @NonNull Double left;

    public @NonNull Double getLeft() {
      return left;
    }

    public void setLeft(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"left\" is null.");
      }
      this.left = setterArg;
    }

    /** Padding from the bottom. */
    private @NonNull Double bottom;

    public @NonNull Double getBottom() {
      return bottom;
    }

    public void setBottom(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bottom\" is null.");
      }
      this.bottom = setterArg;
    }

    /** Padding from the right. */
    private @NonNull Double right;

    public @NonNull Double getRight() {
      return right;
    }

    public void setRight(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"right\" is null.");
      }
      this.right = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    MbxEdgeInsets() {}

    public static final class Builder {

      private @Nullable Double top;

      @CanIgnoreReturnValue
      public @NonNull Builder setTop(@NonNull Double setterArg) {
        this.top = setterArg;
        return this;
      }

      private @Nullable Double left;

      @CanIgnoreReturnValue
      public @NonNull Builder setLeft(@NonNull Double setterArg) {
        this.left = setterArg;
        return this;
      }

      private @Nullable Double bottom;

      @CanIgnoreReturnValue
      public @NonNull Builder setBottom(@NonNull Double setterArg) {
        this.bottom = setterArg;
        return this;
      }

      private @Nullable Double right;

      @CanIgnoreReturnValue
      public @NonNull Builder setRight(@NonNull Double setterArg) {
        this.right = setterArg;
        return this;
      }

      public @NonNull MbxEdgeInsets build() {
        MbxEdgeInsets pigeonReturn = new MbxEdgeInsets();
        pigeonReturn.setTop(top);
        pigeonReturn.setLeft(left);
        pigeonReturn.setBottom(bottom);
        pigeonReturn.setRight(right);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(top);
      toListResult.add(left);
      toListResult.add(bottom);
      toListResult.add(right);
      return toListResult;
    }

    static @NonNull MbxEdgeInsets fromList(@NonNull ArrayList<Object> list) {
      MbxEdgeInsets pigeonResult = new MbxEdgeInsets();
      Object top = list.get(0);
      pigeonResult.setTop((Double) top);
      Object left = list.get(1);
      pigeonResult.setLeft((Double) left);
      Object bottom = list.get(2);
      pigeonResult.setBottom((Double) bottom);
      Object right = list.get(3);
      pigeonResult.setRight((Double) right);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ScreenCoordinate {
    /** A value representing the x position of this coordinate. */
    private @NonNull Double x;

    public @NonNull Double getX() {
      return x;
    }

    public void setX(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"x\" is null.");
      }
      this.x = setterArg;
    }

    /** A value representing the y position of this coordinate. */
    private @NonNull Double y;

    public @NonNull Double getY() {
      return y;
    }

    public void setY(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"y\" is null.");
      }
      this.y = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ScreenCoordinate() {}

    public static final class Builder {

      private @Nullable Double x;

      @CanIgnoreReturnValue
      public @NonNull Builder setX(@NonNull Double setterArg) {
        this.x = setterArg;
        return this;
      }

      private @Nullable Double y;

      @CanIgnoreReturnValue
      public @NonNull Builder setY(@NonNull Double setterArg) {
        this.y = setterArg;
        return this;
      }

      public @NonNull ScreenCoordinate build() {
        ScreenCoordinate pigeonReturn = new ScreenCoordinate();
        pigeonReturn.setX(x);
        pigeonReturn.setY(y);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(x);
      toListResult.add(y);
      return toListResult;
    }

    static @NonNull ScreenCoordinate fromList(@NonNull ArrayList<Object> list) {
      ScreenCoordinate pigeonResult = new ScreenCoordinate();
      Object x = list.get(0);
      pigeonResult.setX((Double) x);
      Object y = list.get(1);
      pigeonResult.setY((Double) y);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CameraOptions {
    /** Coordinate at the center of the camera. */
    private @Nullable Map<String, Object> center;

    public @Nullable Map<String, Object> getCenter() {
      return center;
    }

    public void setCenter(@Nullable Map<String, Object> setterArg) {
      this.center = setterArg;
    }

    /**
     * Padding around the interior of the view that affects the frame of
     * reference for `center`.
     */
    private @Nullable MbxEdgeInsets padding;

    public @Nullable MbxEdgeInsets getPadding() {
      return padding;
    }

    public void setPadding(@Nullable MbxEdgeInsets setterArg) {
      this.padding = setterArg;
    }

    /**
     * Point of reference for `zoom` and `angle`, assuming an origin at the
     * top-left corner of the view.
     */
    private @Nullable ScreenCoordinate anchor;

    public @Nullable ScreenCoordinate getAnchor() {
      return anchor;
    }

    public void setAnchor(@Nullable ScreenCoordinate setterArg) {
      this.anchor = setterArg;
    }

    /**
     * Zero-based zoom level. Constrained to the minimum and maximum zoom
     * levels.
     */
    private @Nullable Double zoom;

    public @Nullable Double getZoom() {
      return zoom;
    }

    public void setZoom(@Nullable Double setterArg) {
      this.zoom = setterArg;
    }

    /** Bearing, measured in degrees from true north. Wrapped to [0, 360). */
    private @Nullable Double bearing;

    public @Nullable Double getBearing() {
      return bearing;
    }

    public void setBearing(@Nullable Double setterArg) {
      this.bearing = setterArg;
    }

    /** Pitch toward the horizon measured in degrees. */
    private @Nullable Double pitch;

    public @Nullable Double getPitch() {
      return pitch;
    }

    public void setPitch(@Nullable Double setterArg) {
      this.pitch = setterArg;
    }

    public static final class Builder {

      private @Nullable Map<String, Object> center;

      @CanIgnoreReturnValue
      public @NonNull Builder setCenter(@Nullable Map<String, Object> setterArg) {
        this.center = setterArg;
        return this;
      }

      private @Nullable MbxEdgeInsets padding;

      @CanIgnoreReturnValue
      public @NonNull Builder setPadding(@Nullable MbxEdgeInsets setterArg) {
        this.padding = setterArg;
        return this;
      }

      private @Nullable ScreenCoordinate anchor;

      @CanIgnoreReturnValue
      public @NonNull Builder setAnchor(@Nullable ScreenCoordinate setterArg) {
        this.anchor = setterArg;
        return this;
      }

      private @Nullable Double zoom;

      @CanIgnoreReturnValue
      public @NonNull Builder setZoom(@Nullable Double setterArg) {
        this.zoom = setterArg;
        return this;
      }

      private @Nullable Double bearing;

      @CanIgnoreReturnValue
      public @NonNull Builder setBearing(@Nullable Double setterArg) {
        this.bearing = setterArg;
        return this;
      }

      private @Nullable Double pitch;

      @CanIgnoreReturnValue
      public @NonNull Builder setPitch(@Nullable Double setterArg) {
        this.pitch = setterArg;
        return this;
      }

      public @NonNull CameraOptions build() {
        CameraOptions pigeonReturn = new CameraOptions();
        pigeonReturn.setCenter(center);
        pigeonReturn.setPadding(padding);
        pigeonReturn.setAnchor(anchor);
        pigeonReturn.setZoom(zoom);
        pigeonReturn.setBearing(bearing);
        pigeonReturn.setPitch(pitch);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(center);
      toListResult.add((padding == null) ? null : padding.toList());
      toListResult.add((anchor == null) ? null : anchor.toList());
      toListResult.add(zoom);
      toListResult.add(bearing);
      toListResult.add(pitch);
      return toListResult;
    }

    static @NonNull CameraOptions fromList(@NonNull ArrayList<Object> list) {
      CameraOptions pigeonResult = new CameraOptions();
      Object center = list.get(0);
      pigeonResult.setCenter((Map<String, Object>) center);
      Object padding = list.get(1);
      pigeonResult.setPadding((padding == null) ? null : MbxEdgeInsets.fromList((ArrayList<Object>) padding));
      Object anchor = list.get(2);
      pigeonResult.setAnchor((anchor == null) ? null : ScreenCoordinate.fromList((ArrayList<Object>) anchor));
      Object zoom = list.get(3);
      pigeonResult.setZoom((Double) zoom);
      Object bearing = list.get(4);
      pigeonResult.setBearing((Double) bearing);
      Object pitch = list.get(5);
      pigeonResult.setPitch((Double) pitch);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Size {
    /** Width of the size. */
    private @NonNull Double width;

    public @NonNull Double getWidth() {
      return width;
    }

    public void setWidth(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"width\" is null.");
      }
      this.width = setterArg;
    }

    /** Height of the size. */
    private @NonNull Double height;

    public @NonNull Double getHeight() {
      return height;
    }

    public void setHeight(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"height\" is null.");
      }
      this.height = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Size() {}

    public static final class Builder {

      private @Nullable Double width;

      @CanIgnoreReturnValue
      public @NonNull Builder setWidth(@NonNull Double setterArg) {
        this.width = setterArg;
        return this;
      }

      private @Nullable Double height;

      @CanIgnoreReturnValue
      public @NonNull Builder setHeight(@NonNull Double setterArg) {
        this.height = setterArg;
        return this;
      }

      public @NonNull Size build() {
        Size pigeonReturn = new Size();
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(width);
      toListResult.add(height);
      return toListResult;
    }

    static @NonNull Size fromList(@NonNull ArrayList<Object> list) {
      Size pigeonResult = new Size();
      Object width = list.get(0);
      pigeonResult.setWidth((Double) width);
      Object height = list.get(1);
      pigeonResult.setHeight((Double) height);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CoordinateBounds {
    /**
     * Coordinate at the southwest corner.
     * Note: setting this field with invalid values (infinite, NaN) will crash the application.
     */
    private @NonNull Map<String, Object> southwest;

    public @NonNull Map<String, Object> getSouthwest() {
      return southwest;
    }

    public void setSouthwest(@NonNull Map<String, Object> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"southwest\" is null.");
      }
      this.southwest = setterArg;
    }

    /**
     * Coordinate at the northeast corner.
     * Note: setting this field with invalid values (infinite, NaN) will crash the application.
     */
    private @NonNull Map<String, Object> northeast;

    public @NonNull Map<String, Object> getNortheast() {
      return northeast;
    }

    public void setNortheast(@NonNull Map<String, Object> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"northeast\" is null.");
      }
      this.northeast = setterArg;
    }

    /**
     * If set to `true`, an infinite (unconstrained) bounds covering the world coordinates would be used.
     * Coordinates provided in `southwest` and `northeast` fields would be omitted and have no effect.
     */
    private @NonNull Boolean infiniteBounds;

    public @NonNull Boolean getInfiniteBounds() {
      return infiniteBounds;
    }

    public void setInfiniteBounds(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"infiniteBounds\" is null.");
      }
      this.infiniteBounds = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    CoordinateBounds() {}

    public static final class Builder {

      private @Nullable Map<String, Object> southwest;

      @CanIgnoreReturnValue
      public @NonNull Builder setSouthwest(@NonNull Map<String, Object> setterArg) {
        this.southwest = setterArg;
        return this;
      }

      private @Nullable Map<String, Object> northeast;

      @CanIgnoreReturnValue
      public @NonNull Builder setNortheast(@NonNull Map<String, Object> setterArg) {
        this.northeast = setterArg;
        return this;
      }

      private @Nullable Boolean infiniteBounds;

      @CanIgnoreReturnValue
      public @NonNull Builder setInfiniteBounds(@NonNull Boolean setterArg) {
        this.infiniteBounds = setterArg;
        return this;
      }

      public @NonNull CoordinateBounds build() {
        CoordinateBounds pigeonReturn = new CoordinateBounds();
        pigeonReturn.setSouthwest(southwest);
        pigeonReturn.setNortheast(northeast);
        pigeonReturn.setInfiniteBounds(infiniteBounds);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(southwest);
      toListResult.add(northeast);
      toListResult.add(infiniteBounds);
      return toListResult;
    }

    static @NonNull CoordinateBounds fromList(@NonNull ArrayList<Object> list) {
      CoordinateBounds pigeonResult = new CoordinateBounds();
      Object southwest = list.get(0);
      pigeonResult.setSouthwest((Map<String, Object>) southwest);
      Object northeast = list.get(1);
      pigeonResult.setNortheast((Map<String, Object>) northeast);
      Object infiniteBounds = list.get(2);
      pigeonResult.setInfiniteBounds((Boolean) infiniteBounds);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CameraState {
    /** Coordinate at the center of the camera. */
    private @NonNull Map<String, Object> center;

    public @NonNull Map<String, Object> getCenter() {
      return center;
    }

    public void setCenter(@NonNull Map<String, Object> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"center\" is null.");
      }
      this.center = setterArg;
    }

    /**
     * Padding around the interior of the view that affects the frame of
     * reference for `center`.
     */
    private @NonNull MbxEdgeInsets padding;

    public @NonNull MbxEdgeInsets getPadding() {
      return padding;
    }

    public void setPadding(@NonNull MbxEdgeInsets setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"padding\" is null.");
      }
      this.padding = setterArg;
    }

    /**
     * Zero-based zoom level. Constrained to the minimum and maximum zoom
     * levels.
     */
    private @NonNull Double zoom;

    public @NonNull Double getZoom() {
      return zoom;
    }

    public void setZoom(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"zoom\" is null.");
      }
      this.zoom = setterArg;
    }

    /** Bearing, measured in degrees from true north. Wrapped to [0, 360). */
    private @NonNull Double bearing;

    public @NonNull Double getBearing() {
      return bearing;
    }

    public void setBearing(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bearing\" is null.");
      }
      this.bearing = setterArg;
    }

    /** Pitch toward the horizon measured in degrees. */
    private @NonNull Double pitch;

    public @NonNull Double getPitch() {
      return pitch;
    }

    public void setPitch(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"pitch\" is null.");
      }
      this.pitch = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    CameraState() {}

    public static final class Builder {

      private @Nullable Map<String, Object> center;

      @CanIgnoreReturnValue
      public @NonNull Builder setCenter(@NonNull Map<String, Object> setterArg) {
        this.center = setterArg;
        return this;
      }

      private @Nullable MbxEdgeInsets padding;

      @CanIgnoreReturnValue
      public @NonNull Builder setPadding(@NonNull MbxEdgeInsets setterArg) {
        this.padding = setterArg;
        return this;
      }

      private @Nullable Double zoom;

      @CanIgnoreReturnValue
      public @NonNull Builder setZoom(@NonNull Double setterArg) {
        this.zoom = setterArg;
        return this;
      }

      private @Nullable Double bearing;

      @CanIgnoreReturnValue
      public @NonNull Builder setBearing(@NonNull Double setterArg) {
        this.bearing = setterArg;
        return this;
      }

      private @Nullable Double pitch;

      @CanIgnoreReturnValue
      public @NonNull Builder setPitch(@NonNull Double setterArg) {
        this.pitch = setterArg;
        return this;
      }

      public @NonNull CameraState build() {
        CameraState pigeonReturn = new CameraState();
        pigeonReturn.setCenter(center);
        pigeonReturn.setPadding(padding);
        pigeonReturn.setZoom(zoom);
        pigeonReturn.setBearing(bearing);
        pigeonReturn.setPitch(pitch);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(center);
      toListResult.add((padding == null) ? null : padding.toList());
      toListResult.add(zoom);
      toListResult.add(bearing);
      toListResult.add(pitch);
      return toListResult;
    }

    static @NonNull CameraState fromList(@NonNull ArrayList<Object> list) {
      CameraState pigeonResult = new CameraState();
      Object center = list.get(0);
      pigeonResult.setCenter((Map<String, Object>) center);
      Object padding = list.get(1);
      pigeonResult.setPadding((padding == null) ? null : MbxEdgeInsets.fromList((ArrayList<Object>) padding));
      Object zoom = list.get(2);
      pigeonResult.setZoom((Double) zoom);
      Object bearing = list.get(3);
      pigeonResult.setBearing((Double) bearing);
      Object pitch = list.get(4);
      pigeonResult.setPitch((Double) pitch);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MbxImage {
    /** The width of the image, in screen pixels. */
    private @NonNull Long width;

    public @NonNull Long getWidth() {
      return width;
    }

    public void setWidth(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"width\" is null.");
      }
      this.width = setterArg;
    }

    /** The height of the image, in screen pixels. */
    private @NonNull Long height;

    public @NonNull Long getHeight() {
      return height;
    }

    public void setHeight(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"height\" is null.");
      }
      this.height = setterArg;
    }

    /**
     * 32-bit premultiplied RGBA image data.
     *
     * An uncompressed image data encoded in 32-bit RGBA format with premultiplied
     * alpha channel. This field should contain exactly `4 * width * height` bytes. It
     * should consist of a sequence of scanlines.
     */
    private @NonNull byte[] data;

    public @NonNull byte[] getData() {
      return data;
    }

    public void setData(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"data\" is null.");
      }
      this.data = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    MbxImage() {}

    public static final class Builder {

      private @Nullable Long width;

      @CanIgnoreReturnValue
      public @NonNull Builder setWidth(@NonNull Long setterArg) {
        this.width = setterArg;
        return this;
      }

      private @Nullable Long height;

      @CanIgnoreReturnValue
      public @NonNull Builder setHeight(@NonNull Long setterArg) {
        this.height = setterArg;
        return this;
      }

      private @Nullable byte[] data;

      @CanIgnoreReturnValue
      public @NonNull Builder setData(@NonNull byte[] setterArg) {
        this.data = setterArg;
        return this;
      }

      public @NonNull MbxImage build() {
        MbxImage pigeonReturn = new MbxImage();
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(width);
      toListResult.add(height);
      toListResult.add(data);
      return toListResult;
    }

    static @NonNull MbxImage fromList(@NonNull ArrayList<Object> list) {
      MbxImage pigeonResult = new MbxImage();
      Object width = list.get(0);
      pigeonResult.setWidth((width == null) ? null : ((width instanceof Integer) ? (Integer) width : (Long) width));
      Object height = list.get(1);
      pigeonResult.setHeight((height == null) ? null : ((height instanceof Integer) ? (Integer) height : (Long) height));
      Object data = list.get(2);
      pigeonResult.setData((byte[]) data);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class _SnapshotterMessagerCodec extends StandardMessageCodec {
    public static final _SnapshotterMessagerCodec INSTANCE = new _SnapshotterMessagerCodec();

    private _SnapshotterMessagerCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return CameraOptions.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return CameraState.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return CoordinateBounds.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return MbxEdgeInsets.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return MbxImage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return ScreenCoordinate.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return Size.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof CameraOptions) {
        stream.write(128);
        writeValue(stream, ((CameraOptions) value).toList());
      } else if (value instanceof CameraState) {
        stream.write(129);
        writeValue(stream, ((CameraState) value).toList());
      } else if (value instanceof CoordinateBounds) {
        stream.write(130);
        writeValue(stream, ((CoordinateBounds) value).toList());
      } else if (value instanceof MbxEdgeInsets) {
        stream.write(131);
        writeValue(stream, ((MbxEdgeInsets) value).toList());
      } else if (value instanceof MbxImage) {
        stream.write(132);
        writeValue(stream, ((MbxImage) value).toList());
      } else if (value instanceof ScreenCoordinate) {
        stream.write(133);
        writeValue(stream, ((ScreenCoordinate) value).toList());
      } else if (value instanceof Size) {
        stream.write(134);
        writeValue(stream, ((Size) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface _SnapshotterMessager {

    void cancel(@NonNull String id);

    void destroy(@NonNull String id);

    void setCamera(@NonNull String id, @NonNull CameraOptions cameraOptions);

    void setStyleUri(@NonNull String id, @NonNull String styleUri);

    void setStyleJson(@NonNull String id, @NonNull String styleJson);

    void setSize(@NonNull String id, @NonNull Size size);

    @NonNull 
    CameraOptions cameraForCoordinates(@NonNull String id, @NonNull List<Map<String, Object>> coordinates, @NonNull MbxEdgeInsets padding, @Nullable Double bearing, @Nullable Double pitch);

    @NonNull 
    CoordinateBounds coordinateBoundsForCamera(@NonNull String id, @NonNull CameraOptions camera);

    @NonNull 
    CameraState getCameraState(@NonNull String id);

    @NonNull 
    Size getSize(@NonNull String id);

    @NonNull 
    String getStyleJson(@NonNull String id);

    @NonNull 
    String getStyleUri(@NonNull String id);

    void start(@NonNull String id, @NonNull NullableResult<MbxImage> result);

    /** The codec used by _SnapshotterMessager. */
    static @NonNull MessageCodec<Object> getCodec() {
      return _SnapshotterMessagerCodec.INSTANCE;
    }
    /**Sets up an instance of `_SnapshotterMessager` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable _SnapshotterMessager api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.cancel", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String idArg = (String) args.get(0);
                try {
                  api.cancel(idArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.destroy", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String idArg = (String) args.get(0);
                try {
                  api.destroy(idArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setCamera", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String idArg = (String) args.get(0);
                CameraOptions cameraOptionsArg = (CameraOptions) args.get(1);
                try {
                  api.setCamera(idArg, cameraOptionsArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setStyleUri", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String idArg = (String) args.get(0);
                String styleUriArg = (String) args.get(1);
                try {
                  api.setStyleUri(idArg, styleUriArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setStyleJson", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String idArg = (String) args.get(0);
                String styleJsonArg = (String) args.get(1);
                try {
                  api.setStyleJson(idArg, styleJsonArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setSize", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String idArg = (String) args.get(0);
                Size sizeArg = (Size) args.get(1);
                try {
                  api.setSize(idArg, sizeArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.cameraForCoordinates", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String idArg = (String) args.get(0);
                List<Map<String, Object>> coordinatesArg = (List<Map<String, Object>>) args.get(1);
                MbxEdgeInsets paddingArg = (MbxEdgeInsets) args.get(2);
                Double bearingArg = (Double) args.get(3);
                Double pitchArg = (Double) args.get(4);
                try {
                  CameraOptions output = api.cameraForCoordinates(idArg, coordinatesArg, paddingArg, bearingArg, pitchArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.coordinateBoundsForCamera", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String idArg = (String) args.get(0);
                CameraOptions cameraArg = (CameraOptions) args.get(1);
                try {
                  CoordinateBounds output = api.coordinateBoundsForCamera(idArg, cameraArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getCameraState", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String idArg = (String) args.get(0);
                try {
                  CameraState output = api.getCameraState(idArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getSize", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String idArg = (String) args.get(0);
                try {
                  Size output = api.getSize(idArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getStyleJson", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String idArg = (String) args.get(0);
                try {
                  String output = api.getStyleJson(idArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getStyleUri", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String idArg = (String) args.get(0);
                try {
                  String output = api.getStyleUri(idArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.start", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String idArg = (String) args.get(0);
                NullableResult<MbxImage> resultCallback =
                    new NullableResult<MbxImage>() {
                      public void success(MbxImage result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.start(idArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class OnSnapshotStyleListener {
    private final @NonNull BinaryMessenger binaryMessenger;

    public OnSnapshotStyleListener(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    /** The codec used by OnSnapshotStyleListener. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    public void onDidFinishLoadingStyle(@NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onDidFinishLoadingStyle";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          null,
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onDidFullyLoadStyle(@NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onDidFullyLoadStyle";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          null,
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onDidFailLoadingStyle(@NonNull String messageArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onDidFailLoadingStyle";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(messageArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onStyleImageMissing(@NonNull String imageIdArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onStyleImageMissing";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(imageIdArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
}
