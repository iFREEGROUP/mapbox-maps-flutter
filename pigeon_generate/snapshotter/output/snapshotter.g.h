// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

@class FLTMbxEdgeInsets;
@class FLTScreenCoordinate;
@class FLTCameraOptions;
@class FLTSize;
@class FLTCoordinateBounds;
@class FLTCameraState;
@class FLTMbxImage;

@interface FLTMbxEdgeInsets : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithTop:(double )top
    left:(double )left
    bottom:(double )bottom
    right:(double )right;
/// Padding from the top.
@property(nonatomic, assign) double  top;
/// Padding from the left.
@property(nonatomic, assign) double  left;
/// Padding from the bottom.
@property(nonatomic, assign) double  bottom;
/// Padding from the right.
@property(nonatomic, assign) double  right;
@end

@interface FLTScreenCoordinate : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithX:(double )x
    y:(double )y;
/// A value representing the x position of this coordinate.
@property(nonatomic, assign) double  x;
/// A value representing the y position of this coordinate.
@property(nonatomic, assign) double  y;
@end

@interface FLTCameraOptions : NSObject
+ (instancetype)makeWithCenter:(nullable NSDictionary<NSString *, id> *)center
    padding:(nullable FLTMbxEdgeInsets *)padding
    anchor:(nullable FLTScreenCoordinate *)anchor
    zoom:(nullable NSNumber *)zoom
    bearing:(nullable NSNumber *)bearing
    pitch:(nullable NSNumber *)pitch;
/// Coordinate at the center of the camera.
@property(nonatomic, copy, nullable) NSDictionary<NSString *, id> * center;
/// Padding around the interior of the view that affects the frame of
/// reference for `center`.
@property(nonatomic, strong, nullable) FLTMbxEdgeInsets * padding;
/// Point of reference for `zoom` and `angle`, assuming an origin at the
/// top-left corner of the view.
@property(nonatomic, strong, nullable) FLTScreenCoordinate * anchor;
/// Zero-based zoom level. Constrained to the minimum and maximum zoom
/// levels.
@property(nonatomic, strong, nullable) NSNumber * zoom;
/// Bearing, measured in degrees from true north. Wrapped to [0, 360).
@property(nonatomic, strong, nullable) NSNumber * bearing;
/// Pitch toward the horizon measured in degrees.
@property(nonatomic, strong, nullable) NSNumber * pitch;
@end

@interface FLTSize : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithWidth:(double )width
    height:(double )height;
/// Width of the size.
@property(nonatomic, assign) double  width;
/// Height of the size.
@property(nonatomic, assign) double  height;
@end

@interface FLTCoordinateBounds : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithSouthwest:(NSDictionary<NSString *, id> *)southwest
    northeast:(NSDictionary<NSString *, id> *)northeast
    infiniteBounds:(BOOL )infiniteBounds;
/// Coordinate at the southwest corner.
/// Note: setting this field with invalid values (infinite, NaN) will crash the application.
@property(nonatomic, copy) NSDictionary<NSString *, id> * southwest;
/// Coordinate at the northeast corner.
/// Note: setting this field with invalid values (infinite, NaN) will crash the application.
@property(nonatomic, copy) NSDictionary<NSString *, id> * northeast;
/// If set to `true`, an infinite (unconstrained) bounds covering the world coordinates would be used.
/// Coordinates provided in `southwest` and `northeast` fields would be omitted and have no effect.
@property(nonatomic, assign) BOOL  infiniteBounds;
@end

@interface FLTCameraState : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithCenter:(NSDictionary<NSString *, id> *)center
    padding:(FLTMbxEdgeInsets *)padding
    zoom:(double )zoom
    bearing:(double )bearing
    pitch:(double )pitch;
/// Coordinate at the center of the camera.
@property(nonatomic, copy) NSDictionary<NSString *, id> * center;
/// Padding around the interior of the view that affects the frame of
/// reference for `center`.
@property(nonatomic, strong) FLTMbxEdgeInsets * padding;
/// Zero-based zoom level. Constrained to the minimum and maximum zoom
/// levels.
@property(nonatomic, assign) double  zoom;
/// Bearing, measured in degrees from true north. Wrapped to [0, 360).
@property(nonatomic, assign) double  bearing;
/// Pitch toward the horizon measured in degrees.
@property(nonatomic, assign) double  pitch;
@end

@interface FLTMbxImage : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithWidth:(NSInteger )width
    height:(NSInteger )height
    data:(FlutterStandardTypedData *)data;
/// The width of the image, in screen pixels.
@property(nonatomic, assign) NSInteger  width;
/// The height of the image, in screen pixels.
@property(nonatomic, assign) NSInteger  height;
/// 32-bit premultiplied RGBA image data.
///
/// An uncompressed image data encoded in 32-bit RGBA format with premultiplied
/// alpha channel. This field should contain exactly `4 * width * height` bytes. It
/// should consist of a sequence of scanlines.
@property(nonatomic, strong) FlutterStandardTypedData * data;
@end

/// The codec used by FLT_SnapshotterMessager.
NSObject<FlutterMessageCodec> *FLT_SnapshotterMessagerGetCodec(void);

@protocol FLT_SnapshotterMessager
- (void)cancelId:(NSString *)id completion:(void (^)(FlutterError *_Nullable))completion;
- (void)destroyId:(NSString *)id completion:(void (^)(FlutterError *_Nullable))completion;
- (void)setCameraId:(NSString *)id cameraOptions:(FLTCameraOptions *)cameraOptions completion:(void (^)(FlutterError *_Nullable))completion;
- (void)setStyleUriId:(NSString *)id styleUri:(NSString *)styleUri completion:(void (^)(FlutterError *_Nullable))completion;
- (void)setStyleJsonId:(NSString *)id styleJson:(NSString *)styleJson completion:(void (^)(FlutterError *_Nullable))completion;
- (void)setSizeId:(NSString *)id size:(FLTSize *)size completion:(void (^)(FlutterError *_Nullable))completion;
- (void)cameraForCoordinatesId:(NSString *)id coordinates:(NSArray<NSDictionary<NSString *, id> *> *)coordinates padding:(FLTMbxEdgeInsets *)padding bearing:(nullable NSNumber *)bearing pitch:(nullable NSNumber *)pitch completion:(void (^)(FLTCameraOptions *_Nullable, FlutterError *_Nullable))completion;
- (void)coordinateBoundsForCameraId:(NSString *)id camera:(FLTCameraOptions *)camera completion:(void (^)(FLTCoordinateBounds *_Nullable, FlutterError *_Nullable))completion;
- (void)getCameraStateId:(NSString *)id completion:(void (^)(FLTCameraState *_Nullable, FlutterError *_Nullable))completion;
- (void)getSizeId:(NSString *)id completion:(void (^)(FLTSize *_Nullable, FlutterError *_Nullable))completion;
- (void)getStyleJsonId:(NSString *)id completion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion;
- (void)getStyleUriId:(NSString *)id completion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion;
- (void)startId:(NSString *)id completion:(void (^)(FLTMbxImage *_Nullable, FlutterError *_Nullable))completion;
@end

extern void SetUpFLT_SnapshotterMessager(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SnapshotterMessager> *_Nullable api);

/// The codec used by FLTOnSnapshotStyleListener.
NSObject<FlutterMessageCodec> *FLTOnSnapshotStyleListenerGetCodec(void);

@interface FLTOnSnapshotStyleListener : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onDidFinishLoadingStyleWithCompletion:(void (^)(FlutterError *_Nullable))completion;
- (void)onDidFullyLoadStyleWithCompletion:(void (^)(FlutterError *_Nullable))completion;
- (void)onDidFailLoadingStyleMessage:(NSString *)message completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onStyleImageMissingImageId:(NSString *)imageId completion:(void (^)(FlutterError *_Nullable))completion;
@end

NS_ASSUME_NONNULL_END
