// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class MbxEdgeInsets (
  /** Padding from the top. */
  val top: Double,
  /** Padding from the left. */
  val left: Double,
  /** Padding from the bottom. */
  val bottom: Double,
  /** Padding from the right. */
  val right: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MbxEdgeInsets {
      val top = list[0] as Double
      val left = list[1] as Double
      val bottom = list[2] as Double
      val right = list[3] as Double
      return MbxEdgeInsets(top, left, bottom, right)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      top,
      left,
      bottom,
      right,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ScreenCoordinate (
  /** A value representing the x position of this coordinate. */
  val x: Double,
  /** A value representing the y position of this coordinate. */
  val y: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ScreenCoordinate {
      val x = list[0] as Double
      val y = list[1] as Double
      return ScreenCoordinate(x, y)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      x,
      y,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CameraOptions (
  /** Coordinate at the center of the camera. */
  val center: Map<String?, Any?>? = null,
  /**
   * Padding around the interior of the view that affects the frame of
   * reference for `center`.
   */
  val padding: MbxEdgeInsets? = null,
  /**
   * Point of reference for `zoom` and `angle`, assuming an origin at the
   * top-left corner of the view.
   */
  val anchor: ScreenCoordinate? = null,
  /**
   * Zero-based zoom level. Constrained to the minimum and maximum zoom
   * levels.
   */
  val zoom: Double? = null,
  /** Bearing, measured in degrees from true north. Wrapped to [0, 360). */
  val bearing: Double? = null,
  /** Pitch toward the horizon measured in degrees. */
  val pitch: Double? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): CameraOptions {
      val center = list[0] as Map<String?, Any?>?
      val padding: MbxEdgeInsets? = (list[1] as List<Any?>?)?.let {
        MbxEdgeInsets.fromList(it)
      }
      val anchor: ScreenCoordinate? = (list[2] as List<Any?>?)?.let {
        ScreenCoordinate.fromList(it)
      }
      val zoom = list[3] as Double?
      val bearing = list[4] as Double?
      val pitch = list[5] as Double?
      return CameraOptions(center, padding, anchor, zoom, bearing, pitch)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      center,
      padding?.toList(),
      anchor?.toList(),
      zoom,
      bearing,
      pitch,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Size (
  /** Width of the size. */
  val width: Double,
  /** Height of the size. */
  val height: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Size {
      val width = list[0] as Double
      val height = list[1] as Double
      return Size(width, height)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      width,
      height,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CoordinateBounds (
  /**
   * Coordinate at the southwest corner.
   * Note: setting this field with invalid values (infinite, NaN) will crash the application.
   */
  val southwest: Map<String?, Any?>,
  /**
   * Coordinate at the northeast corner.
   * Note: setting this field with invalid values (infinite, NaN) will crash the application.
   */
  val northeast: Map<String?, Any?>,
  /**
   * If set to `true`, an infinite (unconstrained) bounds covering the world coordinates would be used.
   * Coordinates provided in `southwest` and `northeast` fields would be omitted and have no effect.
   */
  val infiniteBounds: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): CoordinateBounds {
      val southwest = list[0] as Map<String?, Any?>
      val northeast = list[1] as Map<String?, Any?>
      val infiniteBounds = list[2] as Boolean
      return CoordinateBounds(southwest, northeast, infiniteBounds)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      southwest,
      northeast,
      infiniteBounds,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CameraState (
  /** Coordinate at the center of the camera. */
  val center: Map<String?, Any?>,
  /**
   * Padding around the interior of the view that affects the frame of
   * reference for `center`.
   */
  val padding: MbxEdgeInsets,
  /**
   * Zero-based zoom level. Constrained to the minimum and maximum zoom
   * levels.
   */
  val zoom: Double,
  /** Bearing, measured in degrees from true north. Wrapped to [0, 360). */
  val bearing: Double,
  /** Pitch toward the horizon measured in degrees. */
  val pitch: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): CameraState {
      val center = list[0] as Map<String?, Any?>
      val padding = MbxEdgeInsets.fromList(list[1] as List<Any?>)
      val zoom = list[2] as Double
      val bearing = list[3] as Double
      val pitch = list[4] as Double
      return CameraState(center, padding, zoom, bearing, pitch)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      center,
      padding.toList(),
      zoom,
      bearing,
      pitch,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MbxImage (
  /** The width of the image, in screen pixels. */
  val width: Long,
  /** The height of the image, in screen pixels. */
  val height: Long,
  /**
   * 32-bit premultiplied RGBA image data.
   *
   * An uncompressed image data encoded in 32-bit RGBA format with premultiplied
   * alpha channel. This field should contain exactly `4 * width * height` bytes. It
   * should consist of a sequence of scanlines.
   */
  val data: ByteArray

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MbxImage {
      val width = list[0].let { if (it is Int) it.toLong() else it as Long }
      val height = list[1].let { if (it is Int) it.toLong() else it as Long }
      val data = list[2] as ByteArray
      return MbxImage(width, height, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      width,
      height,
      data,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object _SnapshotterMessagerCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CameraOptions.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CameraState.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CoordinateBounds.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MbxEdgeInsets.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MbxImage.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ScreenCoordinate.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Size.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is CameraOptions -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is CameraState -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is CoordinateBounds -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is MbxEdgeInsets -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is MbxImage -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is ScreenCoordinate -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is Size -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface _SnapshotterMessager {
  fun cancel(id: String, callback: (Result<Unit>) -> Unit)
  fun destroy(id: String, callback: (Result<Unit>) -> Unit)
  fun setCamera(id: String, cameraOptions: CameraOptions, callback: (Result<Unit>) -> Unit)
  fun setStyleUri(id: String, styleUri: String, callback: (Result<Unit>) -> Unit)
  fun setStyleJson(id: String, styleJson: String, callback: (Result<Unit>) -> Unit)
  fun setSize(id: String, size: Size, callback: (Result<Unit>) -> Unit)
  fun cameraForCoordinates(id: String, coordinates: List<Map<String?, Any?>?>, padding: MbxEdgeInsets, bearing: Double?, pitch: Double?, callback: (Result<CameraOptions>) -> Unit)
  fun coordinateBoundsForCamera(id: String, camera: CameraOptions, callback: (Result<CoordinateBounds>) -> Unit)
  fun getCameraState(id: String, callback: (Result<CameraState>) -> Unit)
  fun getSize(id: String, callback: (Result<Size>) -> Unit)
  fun getStyleJson(id: String, callback: (Result<String>) -> Unit)
  fun getStyleUri(id: String, callback: (Result<String>) -> Unit)
  fun start(id: String, callback: (Result<MbxImage?>) -> Unit)

  companion object {
    /** The codec used by _SnapshotterMessager. */
    val codec: MessageCodec<Any?> by lazy {
      _SnapshotterMessagerCodec
    }
    /** Sets up an instance of `_SnapshotterMessager` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: _SnapshotterMessager?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.cancel", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            api.cancel(idArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.destroy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            api.destroy(idArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setCamera", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val cameraOptionsArg = args[1] as CameraOptions
            api.setCamera(idArg, cameraOptionsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setStyleUri", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val styleUriArg = args[1] as String
            api.setStyleUri(idArg, styleUriArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setStyleJson", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val styleJsonArg = args[1] as String
            api.setStyleJson(idArg, styleJsonArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setSize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val sizeArg = args[1] as Size
            api.setSize(idArg, sizeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.cameraForCoordinates", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val coordinatesArg = args[1] as List<Map<String?, Any?>?>
            val paddingArg = args[2] as MbxEdgeInsets
            val bearingArg = args[3] as Double?
            val pitchArg = args[4] as Double?
            api.cameraForCoordinates(idArg, coordinatesArg, paddingArg, bearingArg, pitchArg) { result: Result<CameraOptions> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.coordinateBoundsForCamera", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val cameraArg = args[1] as CameraOptions
            api.coordinateBoundsForCamera(idArg, cameraArg) { result: Result<CoordinateBounds> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getCameraState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            api.getCameraState(idArg) { result: Result<CameraState> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getSize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            api.getSize(idArg) { result: Result<Size> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getStyleJson", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            api.getStyleJson(idArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getStyleUri", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            api.getStyleUri(idArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.start", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            api.start(idArg) { result: Result<MbxImage?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class OnSnapshotStyleListener(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by OnSnapshotStyleListener. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun onDidFinishLoadingStyle(callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onDidFinishLoadingStyle"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onDidFullyLoadStyle(callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onDidFullyLoadStyle"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onDidFailLoadingStyle(messageArg: String, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onDidFailLoadingStyle"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(messageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onStyleImageMissing(imageIdArg: String, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onStyleImageMissing"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(imageIdArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
