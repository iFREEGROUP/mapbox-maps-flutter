// Autogenerated from Pigeon (v16.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.mapbox.maps.pigeons;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;

/**
 * Generated class from Pigeon.
 */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class FLTSnapshot {

    /**
     * Error class for passing custom error details to Flutter via a thrown PlatformException.
     */
    public static class FlutterError extends RuntimeException {

        /**
         * The error code.
         */
        public final String code;

        /**
         * The error details. Must be a datatype supported by the api codec.
         */
        public final Object details;

        public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) {
            super(message);
            this.code = code;
            this.details = details;
        }
    }

    @NonNull
    protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
        ArrayList<Object> errorList = new ArrayList<Object>(3);
        if (exception instanceof FlutterError) {
            FlutterError error = (FlutterError) exception;
            errorList.add(error.code);
            errorList.add(error.getMessage());
            errorList.add(error.details);
        } else {
            errorList.add(exception.toString());
            errorList.add(exception.getClass().getSimpleName());
            errorList.add(
                    "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
        }
        return errorList;
    }

    @NonNull
    protected static FlutterError createConnectionError(@NonNull String channelName) {
        return new FlutterError("channel-error", "Unable to establish connection on channel: " + channelName + ".", "");
    }

    @Target(METHOD)
    @Retention(CLASS)
    @interface CanIgnoreReturnValue {
    }

    /**
     * Asynchronous error handling return type for non-nullable API method returns.
     */
    public interface Result<T> {
        /**
         * Success case callback method for handling returns.
         */
        void success(@NonNull T result);

        /**
         * Failure case callback method for handling errors.
         */
        void error(@NonNull Throwable error);
    }

    /**
     * Asynchronous error handling return type for nullable API method returns.
     */
    public interface NullableResult<T> {
        /**
         * Success case callback method for handling returns.
         */
        void success(@Nullable T result);

        /**
         * Failure case callback method for handling errors.
         */
        void error(@NonNull Throwable error);
    }

    /**
     * Asynchronous error handling return type for void API method returns.
     */
    public interface VoidResult {
        /**
         * Success case callback method for handling returns.
         */
        void success();

        /**
         * Failure case callback method for handling errors.
         */
        void error(@NonNull Throwable error);
    }

    private static class _SnapshotterMessagerCodec extends StandardMessageCodec {
        public static final _SnapshotterMessagerCodec INSTANCE = new _SnapshotterMessagerCodec();

        private _SnapshotterMessagerCodec() {
        }

        @Override
        protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
            switch (type) {
                case (byte) 128:
                    return FLTMapInterfaces.CameraOptions.fromList((ArrayList<Object>) readValue(buffer));
                case (byte) 129:
                    return FLTMapInterfaces.CameraState.fromList((ArrayList<Object>) readValue(buffer));
                case (byte) 130:
                    return FLTMapInterfaces.CoordinateBounds.fromList((ArrayList<Object>) readValue(buffer));
                case (byte) 131:
                    return FLTMapInterfaces.MbxEdgeInsets.fromList((ArrayList<Object>) readValue(buffer));
                case (byte) 132:
                    return FLTMapInterfaces.MbxImage.fromList((ArrayList<Object>) readValue(buffer));
                case (byte) 133:
                    return FLTMapInterfaces.ScreenCoordinate.fromList((ArrayList<Object>) readValue(buffer));
                case (byte) 134:
                    return FLTMapInterfaces.Size.fromList((ArrayList<Object>) readValue(buffer));
                default:
                    return super.readValueOfType(type, buffer);
            }
        }

        @Override
        protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
            if (value instanceof FLTMapInterfaces.CameraOptions) {
                stream.write(128);
                writeValue(stream, ((FLTMapInterfaces.CameraOptions) value).toList());
            } else if (value instanceof FLTMapInterfaces.CameraState) {
                stream.write(129);
                writeValue(stream, ((FLTMapInterfaces.CameraState) value).toList());
            } else if (value instanceof FLTMapInterfaces.CoordinateBounds) {
                stream.write(130);
                writeValue(stream, ((FLTMapInterfaces.CoordinateBounds) value).toList());
            } else if (value instanceof FLTMapInterfaces.MbxEdgeInsets) {
                stream.write(131);
                writeValue(stream, ((FLTMapInterfaces.MbxEdgeInsets) value).toList());
            } else if (value instanceof FLTMapInterfaces.MbxImage) {
                stream.write(132);
                writeValue(stream, ((FLTMapInterfaces.MbxImage) value).toList());
            } else if (value instanceof FLTMapInterfaces.ScreenCoordinate) {
                stream.write(133);
                writeValue(stream, ((FLTMapInterfaces.ScreenCoordinate) value).toList());
            } else if (value instanceof FLTMapInterfaces.Size) {
                stream.write(134);
                writeValue(stream, ((FLTMapInterfaces.Size) value).toList());
            } else {
                super.writeValue(stream, value);
            }
        }
    }

    /**
     * Generated interface from Pigeon that represents a handler of messages from Flutter.
     */
    public interface _SnapshotterMessager {

        void cancel(@NonNull String id);

        void destroy(@NonNull String id);

        void setCamera(@NonNull String id, @NonNull FLTMapInterfaces.CameraOptions cameraOptions);

        void setStyleUri(@NonNull String id, @NonNull String styleUri);

        void setStyleJson(@NonNull String id, @NonNull String styleJson);

        void setSize(@NonNull String id, @NonNull FLTMapInterfaces.Size size);

        @NonNull
        FLTMapInterfaces.CameraOptions cameraForCoordinates(@NonNull String id, @NonNull List<Map<String, Object>> coordinates, @NonNull FLTMapInterfaces.MbxEdgeInsets padding, @Nullable Double bearing, @Nullable Double pitch);

        @NonNull
        FLTMapInterfaces.CoordinateBounds coordinateBoundsForCamera(@NonNull String id, @NonNull FLTMapInterfaces.CameraOptions camera);

        @NonNull
        FLTMapInterfaces.CameraState getCameraState(@NonNull String id);

        @NonNull
        FLTMapInterfaces.Size getSize(@NonNull String id);

        @NonNull
        String getStyleJson(@NonNull String id);

        @NonNull
        String getStyleUri(@NonNull String id);

        void start(@NonNull String id, @NonNull NullableResult<FLTMapInterfaces.MbxImage> result);

        /**
         * The codec used by _SnapshotterMessager.
         */
        static @NonNull MessageCodec<Object> getCodec() {
            return _SnapshotterMessagerCodec.INSTANCE;
        }

        /**
         * Sets up an instance of `_SnapshotterMessager` to handle messages through the `binaryMessenger`.
         */
        static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable _SnapshotterMessager api) {
            {
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.cancel", getCodec());
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                ArrayList<Object> args = (ArrayList<Object>) message;
                                String idArg = (String) args.get(0);
                                try {
                                    api.cancel(idArg);
                                    wrapped.add(0, null);
                                } catch (Throwable exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    wrapped = wrappedError;
                                }
                                reply.reply(wrapped);
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
            {
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.destroy", getCodec());
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                ArrayList<Object> args = (ArrayList<Object>) message;
                                String idArg = (String) args.get(0);
                                try {
                                    api.destroy(idArg);
                                    wrapped.add(0, null);
                                } catch (Throwable exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    wrapped = wrappedError;
                                }
                                reply.reply(wrapped);
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
            {
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setCamera", getCodec());
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                ArrayList<Object> args = (ArrayList<Object>) message;
                                String idArg = (String) args.get(0);
                                FLTMapInterfaces.CameraOptions cameraOptionsArg = (FLTMapInterfaces.CameraOptions) args.get(1);
                                try {
                                    api.setCamera(idArg, cameraOptionsArg);
                                    wrapped.add(0, null);
                                } catch (Throwable exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    wrapped = wrappedError;
                                }
                                reply.reply(wrapped);
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
            {
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setStyleUri", getCodec());
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                ArrayList<Object> args = (ArrayList<Object>) message;
                                String idArg = (String) args.get(0);
                                String styleUriArg = (String) args.get(1);
                                try {
                                    api.setStyleUri(idArg, styleUriArg);
                                    wrapped.add(0, null);
                                } catch (Throwable exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    wrapped = wrappedError;
                                }
                                reply.reply(wrapped);
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
            {
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setStyleJson", getCodec());
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                ArrayList<Object> args = (ArrayList<Object>) message;
                                String idArg = (String) args.get(0);
                                String styleJsonArg = (String) args.get(1);
                                try {
                                    api.setStyleJson(idArg, styleJsonArg);
                                    wrapped.add(0, null);
                                } catch (Throwable exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    wrapped = wrappedError;
                                }
                                reply.reply(wrapped);
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
            {
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.setSize", getCodec());
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                ArrayList<Object> args = (ArrayList<Object>) message;
                                String idArg = (String) args.get(0);
                                FLTMapInterfaces.Size sizeArg = (FLTMapInterfaces.Size) args.get(1);
                                try {
                                    api.setSize(idArg, sizeArg);
                                    wrapped.add(0, null);
                                } catch (Throwable exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    wrapped = wrappedError;
                                }
                                reply.reply(wrapped);
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
            {
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.cameraForCoordinates", getCodec());
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                ArrayList<Object> args = (ArrayList<Object>) message;
                                String idArg = (String) args.get(0);
                                List<Map<String, Object>> coordinatesArg = (List<Map<String, Object>>) args.get(1);
                                FLTMapInterfaces.MbxEdgeInsets paddingArg = (FLTMapInterfaces.MbxEdgeInsets) args.get(2);
                                Double bearingArg = (Double) args.get(3);
                                Double pitchArg = (Double) args.get(4);
                                try {
                                    FLTMapInterfaces.CameraOptions output = api.cameraForCoordinates(idArg, coordinatesArg, paddingArg, bearingArg, pitchArg);
                                    wrapped.add(0, output);
                                } catch (Throwable exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    wrapped = wrappedError;
                                }
                                reply.reply(wrapped);
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
            {
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.coordinateBoundsForCamera", getCodec());
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                ArrayList<Object> args = (ArrayList<Object>) message;
                                String idArg = (String) args.get(0);
                                FLTMapInterfaces.CameraOptions cameraArg = (FLTMapInterfaces.CameraOptions) args.get(1);
                                try {
                                    FLTMapInterfaces.CoordinateBounds output = api.coordinateBoundsForCamera(idArg, cameraArg);
                                    wrapped.add(0, output);
                                } catch (Throwable exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    wrapped = wrappedError;
                                }
                                reply.reply(wrapped);
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
            {
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getCameraState", getCodec());
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                ArrayList<Object> args = (ArrayList<Object>) message;
                                String idArg = (String) args.get(0);
                                try {
                                    FLTMapInterfaces.CameraState output = api.getCameraState(idArg);
                                    wrapped.add(0, output);
                                } catch (Throwable exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    wrapped = wrappedError;
                                }
                                reply.reply(wrapped);
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
            {
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getSize", getCodec());
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                ArrayList<Object> args = (ArrayList<Object>) message;
                                String idArg = (String) args.get(0);
                                try {
                                    FLTMapInterfaces.Size output = api.getSize(idArg);
                                    wrapped.add(0, output);
                                } catch (Throwable exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    wrapped = wrappedError;
                                }
                                reply.reply(wrapped);
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
            {
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getStyleJson", getCodec());
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                ArrayList<Object> args = (ArrayList<Object>) message;
                                String idArg = (String) args.get(0);
                                try {
                                    String output = api.getStyleJson(idArg);
                                    wrapped.add(0, output);
                                } catch (Throwable exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    wrapped = wrappedError;
                                }
                                reply.reply(wrapped);
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
            {
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.getStyleUri", getCodec());
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                ArrayList<Object> args = (ArrayList<Object>) message;
                                String idArg = (String) args.get(0);
                                try {
                                    String output = api.getStyleUri(idArg);
                                    wrapped.add(0, output);
                                } catch (Throwable exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    wrapped = wrappedError;
                                }
                                reply.reply(wrapped);
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
            {
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapshotterMessager.start", getCodec());
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                ArrayList<Object> args = (ArrayList<Object>) message;
                                String idArg = (String) args.get(0);
                                NullableResult<FLTMapInterfaces.MbxImage> resultCallback =
                                        new NullableResult<FLTMapInterfaces.MbxImage>() {
                                            public void success(FLTMapInterfaces.MbxImage result) {
                                                wrapped.add(0, result);
                                                reply.reply(wrapped);
                                            }

                                            public void error(Throwable error) {
                                                ArrayList<Object> wrappedError = wrapError(error);
                                                reply.reply(wrappedError);
                                            }
                                        };

                                api.start(idArg, resultCallback);
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
        }
    }

    /**
     * Generated class from Pigeon that represents Flutter messages that can be called from Java.
     */
    public static class OnSnapshotStyleListener {
        private final @NonNull BinaryMessenger binaryMessenger;

        public OnSnapshotStyleListener(@NonNull BinaryMessenger argBinaryMessenger) {
            this.binaryMessenger = argBinaryMessenger;
        }

        /** Public interface for sending reply. */
        /**
         * The codec used by OnSnapshotStyleListener.
         */
        static @NonNull MessageCodec<Object> getCodec() {
            return new StandardMessageCodec();
        }

        public void onDidFinishLoadingStyle(@NonNull VoidResult result) {
            final String channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onDidFinishLoadingStyle";
            BasicMessageChannel<Object> channel =
                    new BasicMessageChannel<>(
                            binaryMessenger, channelName, getCodec());
            channel.send(
                    null,
                    channelReply -> {
                        if (channelReply instanceof List) {
                            List<Object> listReply = (List<Object>) channelReply;
                            if (listReply.size() > 1) {
                                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
                            } else {
                                result.success();
                            }
                        } else {
                            result.error(createConnectionError(channelName));
                        }
                    });
        }

        public void onDidFullyLoadStyle(@NonNull VoidResult result) {
            final String channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onDidFullyLoadStyle";
            BasicMessageChannel<Object> channel =
                    new BasicMessageChannel<>(
                            binaryMessenger, channelName, getCodec());
            channel.send(
                    null,
                    channelReply -> {
                        if (channelReply instanceof List) {
                            List<Object> listReply = (List<Object>) channelReply;
                            if (listReply.size() > 1) {
                                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
                            } else {
                                result.success();
                            }
                        } else {
                            result.error(createConnectionError(channelName));
                        }
                    });
        }

        public void onDidFailLoadingStyle(@NonNull String messageArg, @NonNull VoidResult result) {
            final String channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onDidFailLoadingStyle";
            BasicMessageChannel<Object> channel =
                    new BasicMessageChannel<>(
                            binaryMessenger, channelName, getCodec());
            channel.send(
                    new ArrayList<Object>(Collections.singletonList(messageArg)),
                    channelReply -> {
                        if (channelReply instanceof List) {
                            List<Object> listReply = (List<Object>) channelReply;
                            if (listReply.size() > 1) {
                                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
                            } else {
                                result.success();
                            }
                        } else {
                            result.error(createConnectionError(channelName));
                        }
                    });
        }

        public void onStyleImageMissing(@NonNull String imageIdArg, @NonNull VoidResult result) {
            final String channelName = "dev.flutter.pigeon.mapbox_maps_flutter.OnSnapshotStyleListener.onStyleImageMissing";
            BasicMessageChannel<Object> channel =
                    new BasicMessageChannel<>(
                            binaryMessenger, channelName, getCodec());
            channel.send(
                    new ArrayList<Object>(Collections.singletonList(imageIdArg)),
                    channelReply -> {
                        if (channelReply instanceof List) {
                            List<Object> listReply = (List<Object>) channelReply;
                            if (listReply.size() > 1) {
                                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
                            } else {
                                result.success();
                            }
                        } else {
                            result.error(createConnectionError(channelName));
                        }
                    });
        }
    }


    /**
     * Generated class from Pigeon that represents data sent in messages.
     */
    public static final class MapSnapshotOptions {
        private @NonNull FLTMapInterfaces.Size size;

        public @NonNull FLTMapInterfaces.Size getSize() {
            return size;
        }

        public void setSize(@NonNull FLTMapInterfaces.Size setterArg) {
            if (setterArg == null) {
                throw new IllegalStateException("Nonnull field \"size\" is null.");
            }
            this.size = setterArg;
        }

        private @NonNull Double pixelRatio;

        public @NonNull Double getPixelRatio() {
            return pixelRatio;
        }

        public void setPixelRatio(@NonNull Double setterArg) {
            if (setterArg == null) {
                throw new IllegalStateException("Nonnull field \"pixelRatio\" is null.");
            }
            this.pixelRatio = setterArg;
        }

        /**
         * Constructor is non-public to enforce null safety; use Builder.
         */
        MapSnapshotOptions() {
        }

        public static final class Builder {

            private @Nullable FLTMapInterfaces.Size size;

            @CanIgnoreReturnValue
            public @NonNull Builder setSize(@NonNull FLTMapInterfaces.Size setterArg) {
                this.size = setterArg;
                return this;
            }

            private @Nullable Double pixelRatio;

            @CanIgnoreReturnValue
            public @NonNull Builder setPixelRatio(@NonNull Double setterArg) {
                this.pixelRatio = setterArg;
                return this;
            }

            public @NonNull MapSnapshotOptions build() {
                MapSnapshotOptions pigeonReturn = new MapSnapshotOptions();
                pigeonReturn.setSize(size);
                pigeonReturn.setPixelRatio(pixelRatio);
                return pigeonReturn;
            }
        }

        @NonNull
        ArrayList<Object> toList() {
            ArrayList<Object> toListResult = new ArrayList<Object>(2);
            toListResult.add((size == null) ? null : size.toList());
            toListResult.add(pixelRatio);
            return toListResult;
        }

        static @NonNull MapSnapshotOptions fromList(@NonNull ArrayList<Object> list) {
            MapSnapshotOptions pigeonResult = new MapSnapshotOptions();
            Object size = list.get(0);
            pigeonResult.setSize((size == null) ? null : FLTMapInterfaces.Size.fromList((ArrayList<Object>) size));
            Object pixelRatio = list.get(1);
            pigeonResult.setPixelRatio((Double) pixelRatio);
            return pigeonResult;
        }
    }

    /**
     * Generated class from Pigeon that represents data sent in messages.
     */
    public static final class SnapshotOverlayOptions {
        private @NonNull Boolean showLogo;

        public @NonNull Boolean getShowLogo() {
            return showLogo;
        }

        public void setShowLogo(@NonNull Boolean setterArg) {
            if (setterArg == null) {
                throw new IllegalStateException("Nonnull field \"showLogo\" is null.");
            }
            this.showLogo = setterArg;
        }

        private @NonNull Boolean showAttributes;

        public @NonNull Boolean getShowAttributes() {
            return showAttributes;
        }

        public void setShowAttributes(@NonNull Boolean setterArg) {
            if (setterArg == null) {
                throw new IllegalStateException("Nonnull field \"showAttributes\" is null.");
            }
            this.showAttributes = setterArg;
        }

        /**
         * Constructor is non-public to enforce null safety; use Builder.
         */
        SnapshotOverlayOptions() {
        }

        public static final class Builder {

            private @Nullable Boolean showLogo;

            @CanIgnoreReturnValue
            public @NonNull Builder setShowLogo(@NonNull Boolean setterArg) {
                this.showLogo = setterArg;
                return this;
            }

            private @Nullable Boolean showAttributes;

            @CanIgnoreReturnValue
            public @NonNull Builder setShowAttributes(@NonNull Boolean setterArg) {
                this.showAttributes = setterArg;
                return this;
            }

            public @NonNull SnapshotOverlayOptions build() {
                SnapshotOverlayOptions pigeonReturn = new SnapshotOverlayOptions();
                pigeonReturn.setShowLogo(showLogo);
                pigeonReturn.setShowAttributes(showAttributes);
                return pigeonReturn;
            }
        }

        @NonNull
        ArrayList<Object> toList() {
            ArrayList<Object> toListResult = new ArrayList<Object>(2);
            toListResult.add(showLogo);
            toListResult.add(showAttributes);
            return toListResult;
        }

        static @NonNull SnapshotOverlayOptions fromList(@NonNull ArrayList<Object> list) {
            SnapshotOverlayOptions pigeonResult = new SnapshotOverlayOptions();
            Object showLogo = list.get(0);
            pigeonResult.setShowLogo((Boolean) showLogo);
            Object showAttributes = list.get(1);
            pigeonResult.setShowAttributes((Boolean) showAttributes);
            return pigeonResult;
        }
    }

    private static class _SnapShotManagerCodec extends StandardMessageCodec {
        public static final _SnapShotManagerCodec INSTANCE = new _SnapShotManagerCodec();

        private _SnapShotManagerCodec() {
        }

        @Override
        protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
            switch (type) {
                case (byte) 128:
                    return MapSnapshotOptions.fromList((ArrayList<Object>) readValue(buffer));
                case (byte) 129:
                    return FLTMapInterfaces.MbxImage.fromList((ArrayList<Object>) readValue(buffer));
                case (byte) 130:
                    return FLTMapInterfaces.Size.fromList((ArrayList<Object>) readValue(buffer));
                case (byte) 131:
                    return SnapshotOverlayOptions.fromList((ArrayList<Object>) readValue(buffer));
                default:
                    return super.readValueOfType(type, buffer);
            }
        }

        @Override
        protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
            if (value instanceof MapSnapshotOptions) {
                stream.write(128);
                writeValue(stream, ((MapSnapshotOptions) value).toList());
            } else if (value instanceof FLTMapInterfaces.MbxImage) {
                stream.write(129);
                writeValue(stream, ((FLTMapInterfaces.MbxImage) value).toList());
            } else if (value instanceof FLTMapInterfaces.Size) {
                stream.write(130);
                writeValue(stream, ((FLTMapInterfaces.Size) value).toList());
            } else if (value instanceof SnapshotOverlayOptions) {
                stream.write(131);
                writeValue(stream, ((SnapshotOverlayOptions) value).toList());
            } else {
                super.writeValue(stream, value);
            }
        }
    }

    /**
     * Generated interface from Pigeon that represents a handler of messages from Flutter.
     */
    public interface _SnapShotManager {

        @NonNull
        String create(@NonNull MapSnapshotOptions options, @NonNull SnapshotOverlayOptions overlayOptions);

        void snapshot(@NonNull NullableResult<FLTMapInterfaces.MbxImage> result);

        /**
         * The codec used by _SnapShotManager.
         */
        static @NonNull MessageCodec<Object> getCodec() {
            return _SnapShotManagerCodec.INSTANCE;
        }

        /**
         * Sets up an instance of `_SnapShotManager` to handle messages through the `binaryMessenger`.
         */
        static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable _SnapShotManager api) {
            {
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapShotManager.create", getCodec());
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                ArrayList<Object> args = (ArrayList<Object>) message;
                                MapSnapshotOptions optionsArg = (MapSnapshotOptions) args.get(0);
                                SnapshotOverlayOptions overlayOptionsArg = (SnapshotOverlayOptions) args.get(1);
                                try {
                                    String output = api.create(optionsArg, overlayOptionsArg);
                                    wrapped.add(0, output);
                                } catch (Throwable exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    wrapped = wrappedError;
                                }
                                reply.reply(wrapped);
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
            {
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._SnapShotManager.snapshot", getCodec());
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                NullableResult<FLTMapInterfaces.MbxImage> resultCallback =
                                        new NullableResult<FLTMapInterfaces.MbxImage>() {
                                            public void success(FLTMapInterfaces.MbxImage result) {
                                                wrapped.add(0, result);
                                                reply.reply(wrapped);
                                            }

                                            public void error(Throwable error) {
                                                ArrayList<Object> wrappedError = wrapError(error);
                                                reply.reply(wrappedError);
                                            }
                                        };

                                api.snapshot(resultCallback);
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
        }
    }

}